<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神圣的小白菜</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.keenlee.net/"/>
  <updated>2018-09-11T09:36:15.000Z</updated>
  <id>https://www.keenlee.net/</id>
  
  <author>
    <name>神圣的小白菜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMQ基础小结</title>
    <link href="https://www.keenlee.net/2018/09/11/rabbitmq%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/09/11/rabbitmq基础小结/</id>
    <published>2018-09-11T09:35:00.000Z</published>
    <updated>2018-09-11T09:36:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是RabbitMQ？"><a href="#1-什么是RabbitMQ？" class="headerlink" title="1.什么是RabbitMQ？"></a>1.什么是RabbitMQ？</h2><p>RabbitMQ作为消息中间件，可以平衡数据库压力，实现入库的异步操作，是一个在<a href="https://baike.baidu.com/item/AMQP" target="_blank" rel="noopener">AMQP</a>基础上完成的，可复用的企业消息系统。<br>Broker：简单来说就是消息队列服务器实体。 　　<br>Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。 　　<br>Queue：消息队列载体，每个消息都会被投入到一个或多个队列。 　　<br>Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。　　<br>Routing Key：路由关键字，<br>exchange根据这个关键字进行消息投递。 　　<br>vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。 　　<br><a id="more"></a><br>producer：消息生产者，就是投递消息的程序。 　　<br>consumer：消息消费者，就是接受消息的程序。 　　<br>channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</p><p>原理图：</p><p><img src="http://wx3.sinaimg.cn/mw690/005AqIfAgy1fug8hem4fcj30xi0kgjtl.jpg" alt="img"></p><p>思维导图：</p><p><img src="http://wx3.sinaimg.cn/mw690/005AqIfAgy1fugl2jl7brj30nl0demxt.jpg" alt="img"></p><p>参考：<a href="https://www.cnblogs.com/linkenpark/p/5393666.html" target="_blank" rel="noopener">https://www.cnblogs.com/linkenpark/p/5393666.html</a></p><h2 id="2-RabbitMQ的工作模式？"><a href="#2-RabbitMQ的工作模式？" class="headerlink" title="2.RabbitMQ的工作模式？"></a>2.RabbitMQ的工作模式？</h2><ol><li><p>简单模式</p><p>提供者将消息写入队列，如果队列中没有其他消息，则消息会在第一时间被处理<br>消费者会实时监控队列中是否有消息，如果有则进行处理</p></li><li><p>工作模式／双工模式</p><p>由一个生产者生产，多个消费者进行争抢，谁抢到谁执行</p></li><li><p>发布订阅模式（fanout）</p><p>生产者通过交换机，将消息发往不同的队列，每个消费者只关注自己的队列，对自己的队列消息进行消费（一个消息被消费多次，适合群发和广播）</p></li><li><p>路由模式（redirect）</p><p>消费者通过交换机，根据不同的路由key将消息发往不同的队列中，通过路由key的比较，将消息发往特定消费者的队列中（特殊的订阅模式）</p></li><li><p>主题模式（topic）</p><p>通过通配符*（一个或多几个字符）或#（任意类型，可以匹配多个字符串）将消费发往匹配的路由key的消息队列中（特殊的路由模式）</p><p>参考：<a href="http://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">http://www.rabbitmq.com/getstarted.html</a></p></li></ol><h2 id="3-具体应用场景？"><a href="#3-具体应用场景？" class="headerlink" title="3.具体应用场景？"></a>3.具体应用场景？</h2><h2 id="4-如何保证消息队列的消息一定被消费？如何保证消息不被重复消费？如何保证消息的执行顺序？"><a href="#4-如何保证消息队列的消息一定被消费？如何保证消息不被重复消费？如何保证消息的执行顺序？" class="headerlink" title="4.如何保证消息队列的消息一定被消费？如何保证消息不被重复消费？如何保证消息的执行顺序？"></a>4.如何保证消息队列的消息一定被消费？如何保证消息不被重复消费？如何保证消息的执行顺序？</h2><p>Rabbit通过Ack机制机制上，通过先缓存发送的消息，直到得到Ack再删除message，否则从新发送消息，可开启一条线程来进行消息超时的检查。来确保消费被正确发送和消费。</p><p>开启持久化策略，保证服务器在宕机时，消息不会丢失，当会影响性能。<br>当消息被消费，但返回ACK出现问题，会导致，消息重发，重复消费，需要保证业务逻辑的幂等性。可以用db记录消息的消费状态（取消／失败／成功）表示已经被消费了。直接返回ack消息。</p><h2 id="5-RabbitMQ在项目中的使用步骤？spring-rabbit整合？"><a href="#5-RabbitMQ在项目中的使用步骤？spring-rabbit整合？" class="headerlink" title="5.RabbitMQ在项目中的使用步骤？spring-rabbit整合？"></a>5.RabbitMQ在项目中的使用步骤？spring-rabbit整合？</h2><ol><li><p>导入jar包。（新版本的包各种报错，搞不来…）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建rabbitmq.properties文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rabbit.ip=172.16.81.134</span><br><span class="line">rabbit.port=5672</span><br><span class="line">rabbit.username=lzq</span><br><span class="line">rabbit.password=123</span><br><span class="line">virtual-host=/</span><br></pre></td></tr></table></figure></li><li><p>配置spring-Rabbit-send.xml文件，创建连接工厂／创建交换机（可配置自动持久化）／定义rabbitTemplate模版配置连接工厂</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans-4.1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义RabbitMQ的连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">host</span>=<span class="string">"$&#123;rabbit.ip&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">"$&#123;rabbit.port&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">"$&#123;rabbit.username&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">"$&#123;rabbit.password&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">"$&#123;virtual-host&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MQ的管理，包括队列、交换器等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义交换机 自动声明 持久化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">name</span>=<span class="string">"orderExchange"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span> <span class="attr">durable</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义rabbit模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">exchange</span>=<span class="string">"orderExchange"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置连接工厂／定义消息队列／定义交换机（绑定队列，定义路由key）／定义监听，配置监听服务，方法，监听的队列</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans-4.1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 1.定义RabbitMQ的连接工厂 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">host</span>=<span class="string">"$&#123;rabbit.ip&#125;"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">port</span>=<span class="string">"$&#123;rabbit.port&#125;"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">username</span>=<span class="string">"$&#123;rabbit.username&#125;"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">password</span>=<span class="string">"$&#123;rabbit.password&#125;"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">virtual-host</span>=<span class="string">"$&#123;virtual-host&#125;"</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- MQ的管理，包括队列、交换器等 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 定义消息队列 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">"orderQueue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 定义交换机，并且完成队列和交换机的绑定 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">name</span>=<span class="string">"orderExchange"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- key：路由key --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">"orderQueue"</span> <span class="attr">key</span>=<span class="string">"save.order"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--自定义bean处理消息队列中的内容--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"rabbitOrderListener"</span> <span class="attr">class</span>=<span class="string">"net.keenlee.pakchoi.test.listener.RabbitOrderListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 定义监听 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">acknowledge</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 监听一个队列，当队列中有消息，就会自动触发类.方法，传递消息就作为方法的参数，根据方法声明的参数强转 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"rabbitOrderListener"</span> <span class="attr">method</span>=<span class="string">"onMessage"</span> <span class="attr">queues</span>=<span class="string">"orderQueue"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用rabbitTemplate操作消息队列</p><p>发送者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.keenlee.pakchoi.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.keenlee.pakchoi.test.service.RabbitMQOrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRabbitmqController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitMQOrderService rabbitMQOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"saveOrder"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//下单</span></span><br><span class="line">        rabbitMQOrderService.saveOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.keenlee.pakchoi.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RabbitMQOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.keenlee.pakchoi.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.keenlee.pakchoi.test.service.RabbitMQOrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQOrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">RabbitMQOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//下单</span></span><br><span class="line">        System.out.println(<span class="string">"订单保存成功！"</span>);</span><br><span class="line">        System.out.println(<span class="string">"向消息队列发送消息..."</span>);</span><br><span class="line">        <span class="comment">//发送邮件</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"save.order"</span>,<span class="string">"恭喜你，下单成功！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.keenlee.pakchoi.test.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitOrderListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendEmail(<span class="keyword">new</span> String(message.getBody(),<span class="string">"utf-8"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息队列的消息:"</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://wx1.sinaimg.cn/mw690/005AqIfAgy1fv5q4q0k5zj30ho03gjrz.jpg" alt="img"></p></li><li><p>改造1:断开重试机制</p></li><li><p>改造2:消息确认消费</p></li><li><p>改造3:保证消息幂等性</p></li><li><p>改造4:…</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是RabbitMQ？&quot;&gt;&lt;a href=&quot;#1-什么是RabbitMQ？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是RabbitMQ？&quot;&gt;&lt;/a&gt;1.什么是RabbitMQ？&lt;/h2&gt;&lt;p&gt;RabbitMQ作为消息中间件，可以平衡数据库压力，实现入库的异步操作，是一个在&lt;a href=&quot;https://baike.baidu.com/item/AMQP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AMQP&lt;/a&gt;基础上完成的，可复用的企业消息系统。&lt;br&gt;Broker：简单来说就是消息队列服务器实体。 　　&lt;br&gt;Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。 　　&lt;br&gt;Queue：消息队列载体，每个消息都会被投入到一个或多个队列。 　　&lt;br&gt;Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。　　&lt;br&gt;Routing Key：路由关键字，&lt;br&gt;exchange根据这个关键字进行消息投递。 　　&lt;br&gt;vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。 　　&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="消息队列" scheme="https://www.keenlee.net/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="https://www.keenlee.net/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>mycat配置基础小结</title>
    <link href="https://www.keenlee.net/2018/08/20/mycat%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/08/20/mycat基础小结/</id>
    <published>2018-08-20T12:35:00.000Z</published>
    <updated>2018-09-11T09:48:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据库热备原理？"><a href="#1-数据库热备原理？" class="headerlink" title="1.数据库热备原理？"></a>1.数据库热备原理？</h2><ol><li>二进制日志文件。当主数据库发生更新时，会将更新的数据写入二进制文件中。</li><li>I／O线程。从机实时监听二进制文件是否有更新操作，如果有更新操作则读取更新的内容。</li><li>中继日志。保存主库更新的数据（临时存储）。</li><li>SQl线程。将中继日志的信息更新到数据库中。</li></ol><a id="more"></a><h2 id="2-如何配置主从数据库？"><a href="#2-如何配置主从数据库？" class="headerlink" title="2.如何配置主从数据库？"></a>2.如何配置主从数据库？</h2><ol><li>为mysql的配置文件my.cnf，默认条件下的二进制日志文件是关闭的。</li><li>实现主从挂载（互为主从：双机热备）<br>注意：<ul><li>server-id不能重复。</li><li>服务器不能连接：关闭防火墙／IP地址是否正确。</li><li>找不到日志文件：日志文件写错。</li></ul></li><li>主从同步应注意哪些问题？<br>当进行主从挂载时，post位置可以从0开始，但必须保证主从库表一致。<br>进行主从同步时，都是由同一个sql转储文件导入之后再进行数据挂载，这样能极大的降低从库的负载，减轻数据不同步的影响</li></ol><h2 id="3-主从同步延时-不一致解决方案？"><a href="#3-主从同步延时-不一致解决方案？" class="headerlink" title="3.主从同步延时/不一致解决方案？"></a>3.主从同步延时/不一致解决方案？</h2><h2 id="4-mycat的作用？"><a href="#4-mycat的作用？" class="headerlink" title="4.mycat的作用？"></a>4.mycat的作用？</h2><p>mycat是一个高性能的数据库中间件。</p><ol><li>支持心跳检测机制，实现数据库的高可用</li><li>实现数据库的读写分离和主从复制</li><li>支持分库分表</li></ol><h2 id="5-mycat主从搭建？主要步骤及配置？"><a href="#5-mycat主从搭建？主要步骤及配置？" class="headerlink" title="5.mycat主从搭建？主要步骤及配置？"></a>5.mycat主从搭建？主要步骤及配置？</h2><p>mysql数据库实现了完善的数据库备份机制。</p><ol><li><p>搭建主库：</p><ul><li><p>开放数据库权限，导入数据库文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;root&apos;;（测试的时候all,开启起了所有权限，这是危险的）</span><br></pre></td></tr></table></figure></li><li><p>开启二进制文件,编辑mysql系统配置文件my.cnf(指定mysql端口，数据库位置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#指定数据库存储路径</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line">#制定serverid，不能与集群中另一个相同</span><br><span class="line">server-id=1</span><br><span class="line">#开启二进制日志文件</span><br><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure></li><li><p>重启服务，检查二进制文件是否启动</p><p>cd /var/lib/mysql是否存在mysql-bin.000001。每次重启编号加1。</p></li></ul></li><li><p>搭建从库：</p><ul><li>与主库一样修改my.cnf文件，但server-id不能一样</li></ul></li><li><p>主从连接:</p><ul><li><p>查看主库状态SHOW MASTER status，查看它的position</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status</span><br></pre></td></tr></table></figure></li><li><p>实现主从挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#实现主从的挂载  主机的ip 端口  </span><br><span class="line">#用户名和密码  二进制日志文件 文件的位置</span><br><span class="line">change MASTER to MASTER_HOST=&quot;192.168.126.137&quot;,</span><br><span class="line">MASTER_PORT=3306,MASTER_user=&quot;root&quot;,</span><br><span class="line">MASTER_PASSWORD=&quot;root&quot;,</span><br><span class="line">MASTER_LOG_FILE=&quot;mysql-bin.000001&quot;,</span><br><span class="line">MASTER_LOG_POS=120</span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动从服务器，查看从服务状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#检测主从服务启动是否正确 （查看Slave_IO_Runing=yes,Slave_SQL_Runing=yes）</span><br><span class="line">show SLAVE STATUS</span><br></pre></td></tr></table></figure><p>如果slave_IO_Running和slave_SQL_Running的值为yes说明搭建成功。<br><img src="http://wx2.sinaimg.cn/mw690/005AqIfAgy1fugai4f8vrj30co01v3yb.jpg" alt="img"><br><strong>注意</strong>：单纯的主从会存在问题。当主库宕机整个服务都将无法使用，假设配置了一主多从，当主机宕机，从机成为新的主机，但与原有的从机不存在主从关系，导致数据无法同步，解决双机热备。</p></li><li><p>配置jdk，编写两个配置文件schema.xml和server.xml两个配置文件</p><p>schema.xml 主要配置：</p><ul><li><p>配置dataNode：表示数据库节点信息（节点名称／节点主机／数据库名称）</p></li><li><p>配置dataHost：表示节点主机（节点主机名／最大连接数／最小连接数／读写分离策略（balance：0:读操作发往writeHost。1:读操作发往readHost和闲置主节 writeType：0:所有的写操作都会发往第一台writeHost中。1:写操作随机发往writeHost主机／数据库类型／数据库驱动／高可用切换类型switchType：-1不自动切换，1，自动切换心跳检测heratbeat））</p></li><li><p>配置writeHost及对应的readHost（名字／IP：port／用户／密码）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--name属性是自定义的  dataNode表示数据库的节点信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"mytest"</span> <span class="attr">checkSQLschema</span>=<span class="string">"false"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"100"</span> <span class="attr">dataNode</span>=<span class="string">"mytest"</span>&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--定义节点名称/节点主机/数据名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"mytest"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"mytest"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"localhost1"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span>  <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select 1<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM1"</span> <span class="attr">url</span>=<span class="string">"192.168.106.137:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"Lzq_0221"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--读数据库--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS1"</span> <span class="attr">url</span>=<span class="string">"192.168.106.138:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"Lzq_0221"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 需要实现双机热备 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM2"</span> <span class="attr">url</span>=<span class="string">"192.168.106.138:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"Lzq_0221"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS1"</span> <span class="attr">url</span>=<span class="string">"192.168.106.137:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"Lzq_0221"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>server.xml主要配置：</p><ul><li><p>设置防火墙／设置用户标签（用户名／用户密码／数据库要与schema中一致）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>Lzq_0221<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--与schema.xml中的配置相同 注意数据库的大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>mytest<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readOnly"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过连接mycat来操作数据库</p></li><li><p>规则</p><p> rule.xml:mycat分片规则（分库分表）定义的规则为对id使用mod-log将数据库平均拆分。用function中count指定分配的物理库的数量。<br> 支持的规则：固定分片hash算法／范围约定／求模法／日期列分区／一致性hash（可以解决动态扩容的问题）</p></li><li><h2 id="6-分库分表策略，分库分表配置？"><a href="#6-分库分表策略，分库分表配置？" class="headerlink" title="6.分库分表策略，分库分表配置？"></a>6.分库分表策略，分库分表配置？</h2></li></ol><p>答：使用mycat分片实现分库分表……</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-数据库热备原理？&quot;&gt;&lt;a href=&quot;#1-数据库热备原理？&quot; class=&quot;headerlink&quot; title=&quot;1.数据库热备原理？&quot;&gt;&lt;/a&gt;1.数据库热备原理？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;二进制日志文件。当主数据库发生更新时，会将更新的数据写入二进制文件中。&lt;/li&gt;
&lt;li&gt;I／O线程。从机实时监听二进制文件是否有更新操作，如果有更新操作则读取更新的内容。&lt;/li&gt;
&lt;li&gt;中继日志。保存主库更新的数据（临时存储）。&lt;/li&gt;
&lt;li&gt;SQl线程。将中继日志的信息更新到数据库中。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="mycat" scheme="https://www.keenlee.net/tags/mycat/"/>
    
      <category term="数据库中间件" scheme="https://www.keenlee.net/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>dubbo基础小结</title>
    <link href="https://www.keenlee.net/2018/08/20/dubbo%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/08/20/dubbo基础小结/</id>
    <published>2018-08-20T07:55:00.000Z</published>
    <updated>2018-09-11T09:45:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是dubbo"><a href="#1-什么是dubbo" class="headerlink" title="1.什么是dubbo"></a>1.什么是dubbo</h2><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><h2 id="2-dubbo的特性？"><a href="#2-dubbo的特性？" class="headerlink" title="2.dubbo的特性？"></a>2.dubbo的特性？</h2><ul><li><h4 id="面向接口代理的高性能RPC调用"><a href="#面向接口代理的高性能RPC调用" class="headerlink" title="面向接口代理的高性能RPC调用"></a>面向接口代理的高性能RPC调用</h4><p>提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。</p><a id="more"></a></li><li><h4 id="智能负载均衡"><a href="#智能负载均衡" class="headerlink" title="智能负载均衡"></a>智能负载均衡</h4><p>内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。</p></li><li><h4 id="服务自动注册与发现"><a href="#服务自动注册与发现" class="headerlink" title="服务自动注册与发现"></a>服务自动注册与发现</h4><p>支持多种注册中心服务，服务实例上下线实时感知。</p></li><li><h4 id="高度可扩展能力"><a href="#高度可扩展能力" class="headerlink" title="高度可扩展能力"></a>高度可扩展能力</h4><p>遵循微内核+插件的设计原则，所有核心能力如Protocol、Transport、Serialization被设计为扩展点，平等对待内置实现和第三方实现。</p></li><li><h4 id="运行期流量调度"><a href="#运行期流量调度" class="headerlink" title="运行期流量调度"></a>运行期流量调度</h4><p>内置条件、脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布，同机房优先等功能。</p></li><li><h4 id="可视化的服务治理与运维"><a href="#可视化的服务治理与运维" class="headerlink" title="可视化的服务治理与运维"></a>可视化的服务治理与运维</h4><p>提供丰富服务治理、运维工具：随时查询服务元数据、服务健康状态及调用统计，实时下发路由策略、调整配置参数。</p></li></ul><h2 id="3-Dubbo工作原理？"><a href="#3-Dubbo工作原理？" class="headerlink" title="3.Dubbo工作原理？"></a>3.Dubbo工作原理？</h2><p>答：1.消费者2.提供者3.监视器（monitor）4.注册中心（zookeeper）<br>1.消费者配置注册中心地址，添加依赖的服务接口及服务id<br>2.提供者配置注册中心地址，配置dubbo服务接口，暴露服务接口，创建具体实现接口服务的bean</p><p><img src="http://dubbo.apache.org/img/architecture.png" alt="img"></p><h2 id="4-rpc原理"><a href="#4-rpc原理" class="headerlink" title="4.rpc原理"></a>4.rpc原理</h2><h2 id="5-Spring整合Dubbo？"><a href="#5-Spring整合Dubbo？" class="headerlink" title="5.Spring整合Dubbo？"></a>5.Spring整合Dubbo？</h2><p>前提：搭建好了zookeeper作为注册中心。</p><ol><li><p>创建Duubo接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentsDubboServiceInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Students&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者</p><ul><li><p>service实现dubbo接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentsServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentsDubboServiceInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentsMapper studentsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Students&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentsMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置生产者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义了提供方应用信息，用于计算依赖关系；在 dubbo-admin 或 dubbo-monitor 会显示这个名字，方便辨识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demotest-provider"</span> <span class="attr">owner</span>=<span class="string">"programmer"</span> <span class="attr">organization</span>=<span class="string">"dubbox"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 zookeeper 注册中心暴露服务，注意要先开启 zookeeper--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:registry address="zookeeper://192.168.106.128:2181"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span>  <span class="attr">protocol</span>=<span class="string">"zookeeper"</span>  <span class="attr">address</span>=<span class="string">"192.168.106.128:2181,192.168.106.129:2181,192.168.106.130:2181"</span>  /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 dubbo 协议实现定义好的 api.PermissionService 接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"net.keenlee.pakchoi.dubbo.service.StudentsDubboServiceInterface"</span> <span class="attr">ref</span>=<span class="string">"studentsDubboService"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span> <span class="attr">timeout</span>=<span class="string">"10000"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--具体实现该接口的 bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentsDubboService"</span> <span class="attr">class</span>=<span class="string">"net.keenlee.pakchoi.manager.service.impl.StudentsServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>消费者</p><ul><li><p>service实现dubbo接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentsServiceTestImpl</span> <span class="keyword">implements</span> <span class="title">StudentsServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentsDubboServiceInterface studentsDubboServiceInterface;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Students&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentsDubboServiceInterface.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置消费者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demotest-consumer"</span> <span class="attr">owner</span>=<span class="string">"programmer"</span> <span class="attr">organization</span>=<span class="string">"dubbox"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--向 zookeeper 订阅 provider 的地址，由 zookeeper 定时推送--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:registry address="zookeeper://192.168.106.128:2181"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span>  <span class="attr">protocol</span>=<span class="string">"zookeeper"</span>  <span class="attr">address</span>=<span class="string">"192.168.106.128:2181,192.168.106.129:2181,192.168.106.130:2181"</span>  /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 dubbo 协议调用定义好的 api.PermissionService 接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"studentsDubboService"</span> <span class="attr">interface</span>=<span class="string">"net.keenlee.pakchoi.dubbo.service.StudentsDubboServiceInterface"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p>dubbo官网：<a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是dubbo&quot;&gt;&lt;a href=&quot;#1-什么是dubbo&quot; class=&quot;headerlink&quot; title=&quot;1.什么是dubbo&quot;&gt;&lt;/a&gt;1.什么是dubbo&lt;/h2&gt;&lt;p&gt;Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。&lt;/p&gt;
&lt;h2 id=&quot;2-dubbo的特性？&quot;&gt;&lt;a href=&quot;#2-dubbo的特性？&quot; class=&quot;headerlink&quot; title=&quot;2.dubbo的特性？&quot;&gt;&lt;/a&gt;2.dubbo的特性？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;面向接口代理的高性能RPC调用&quot;&gt;&lt;a href=&quot;#面向接口代理的高性能RPC调用&quot; class=&quot;headerlink&quot; title=&quot;面向接口代理的高性能RPC调用&quot;&gt;&lt;/a&gt;面向接口代理的高性能RPC调用&lt;/h4&gt;&lt;p&gt;提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="dubbo" scheme="https://www.keenlee.net/tags/dubbo/"/>
    
      <category term="RPC" scheme="https://www.keenlee.net/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>nginx基础小结</title>
    <link href="https://www.keenlee.net/2018/08/20/nginx%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/08/20/nginx基础小结/</id>
    <published>2018-08-20T03:07:00.000Z</published>
    <updated>2018-08-20T07:28:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是nginx？"><a href="#1-什么是nginx？" class="headerlink" title="1.什么是nginx？"></a>1.什么是nginx？</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理服务，也是一个IMAP/POP3/SMTP服务。</p><h2 id="2-反向代理？项目中使用场景？"><a href="#2-反向代理？项目中使用场景？" class="headerlink" title="2.反向代理？项目中使用场景？"></a>2.反向代理？项目中使用场景？</h2><p>反向代理是指以代理服务器来接受网络请求，将请求转发给内部服务器，并将结果返回给给客户端。<br>实现动静分离，在进行图片回显时由于我们无法直接访问服务器存在本地磁盘的图片文件，只能通过一个虚拟路径进行访问，该请求被代理服务器拦截，将虚拟路径替换为真实路径，最终通过代理将结果进行返回。<br><a id="more"></a></p><h2 id="3-nginx负载均衡？"><a href="#3-nginx负载均衡？" class="headerlink" title="3.nginx负载均衡？"></a>3.nginx负载均衡？</h2><ol><li>轮询机制：upstream 集群名称{}:根据配置文件的顺序依次进行服务的调用。</li><li>权重机制：在集群中添加weight属性。</li><li>ip_hash:根据用户的IP地址进行hash运算，最终算出特定的一台机器进行数据转发（如果配置ip_hash权重和轮询将不起作用）。</li><li>backup：备用机机制，当主服务正忙或者断电／宕机时，备用机将会起作用。</li></ol><h2 id="4-nginx基本配置？"><a href="#4-nginx基本配置？" class="headerlink" title="4.nginx基本配置？"></a>4.nginx基本配置？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">#user  nobody;</span><br><span class="line">#启动进程，通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line">#全局错误日志文件</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">#pid文件</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">#epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll;</span><br><span class="line">#单个后台worker process进程的最大并发链接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                          &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                          &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line">#设定虚拟主机配置</span><br><span class="line">server&#123;</span><br><span class="line">#侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/nginx.access.log  main;</span><br><span class="line">error_log错误日志路径;</span><br><span class="line"></span><br><span class="line">#默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"># 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">location ／&#123;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">proxy_set_header    Host            $host;</span><br><span class="line">proxy_set_header    X-Real-IP       $remote_addr;</span><br><span class="line">proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">root :定义服务器的默认网站根目录位置;</span><br><span class="line">index:定义首页索引文件的名称；</span><br><span class="line">proxy_pass: http://localhost:8091;//转发请求</span><br><span class="line">或者proxy_pass: http://7080 #跟upstream合用</span><br><span class="line">    #定义超时策略</span><br><span class="line">    proxy_connect_timeout 1</span><br><span class="line">    proxy_send_timeout 1</span><br><span class="line">    proxy_read_timeout 1</span><br><span class="line">   &#125;</span><br><span class="line">   #重定向：相对于proxy_pass，地址栏的路径会改变</span><br><span class="line">   location ^~ /oauth2/ &#123;</span><br><span class="line">            rewrite /(.*) https://$host/$1 permanent;</span><br><span class="line">        &#125;</span><br><span class="line">   #禁止访问 .htxxx 文件</span><br><span class="line">    location ~ /.ht &#123;</span><br><span class="line">         deny all;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">#指定proxy_pass代理路径,均衡策略，最大连接失败次数，超时失败时间</span><br><span class="line">upstream 7080 &#123;</span><br><span class="line">      server ip1:7080 weight=5 max_fails=2 fail_timeout=30s;</span><br><span class="line">      #server ip1:7080 weight=3 max_fails=2 fail_timeout=30s;</span><br><span class="line">      #server ip2:7080 weight=2 max_fails=2 fail_timeout=30s;</span><br><span class="line">&#125;</span><br><span class="line">#引入其它配置文件</span><br><span class="line">include servers/*;</span><br><span class="line">include ***.conf; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-正向代理与反向代理的区别？"><a href="#5-正向代理与反向代理的区别？" class="headerlink" title="5.正向代理与反向代理的区别？"></a>5.正向代理与反向代理的区别？</h2><h2 id="6-nginx如何实现tomcat的高可用？"><a href="#6-nginx如何实现tomcat的高可用？" class="headerlink" title="6.nginx如何实现tomcat的高可用？"></a>6.nginx如何实现tomcat的高可用？</h2><pre><code>在nginx连接服务器期间，会自动向服务器发送健康检查机制（ping/发起一次请求）如果服务器失败的次数达到最大失败次数（max_fail）上限，在这个检测周期(fail_timeout)中，将不会再有请求转发到这个服务器上，直到下一次检测周期。</code></pre><h2 id="7-nginx进程模型？事件处理？"><a href="#7-nginx进程模型？事件处理？" class="headerlink" title="7.nginx进程模型？事件处理？"></a>7.nginx进程模型？事件处理？</h2><h2 id="8-与其他服务器的对比？"><a href="#8-与其他服务器的对比？" class="headerlink" title="8.与其他服务器的对比？"></a>8.与其他服务器的对比？</h2><h2 id="9-nginx防盗链？"><a href="#9-nginx防盗链？" class="headerlink" title="9.nginx防盗链？"></a>9.nginx防盗链？</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是nginx？&quot;&gt;&lt;a href=&quot;#1-什么是nginx？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是nginx？&quot;&gt;&lt;/a&gt;1.什么是nginx？&lt;/h2&gt;&lt;p&gt;Nginx (engine x) 是一个高性能的HTTP和反向代理服务，也是一个IMAP/POP3/SMTP服务。&lt;/p&gt;
&lt;h2 id=&quot;2-反向代理？项目中使用场景？&quot;&gt;&lt;a href=&quot;#2-反向代理？项目中使用场景？&quot; class=&quot;headerlink&quot; title=&quot;2.反向代理？项目中使用场景？&quot;&gt;&lt;/a&gt;2.反向代理？项目中使用场景？&lt;/h2&gt;&lt;p&gt;反向代理是指以代理服务器来接受网络请求，将请求转发给内部服务器，并将结果返回给给客户端。&lt;br&gt;实现动静分离，在进行图片回显时由于我们无法直接访问服务器存在本地磁盘的图片文件，只能通过一个虚拟路径进行访问，该请求被代理服务器拦截，将虚拟路径替换为真实路径，最终通过代理将结果进行返回。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="nginx" scheme="https://www.keenlee.net/tags/nginx/"/>
    
      <category term="代理" scheme="https://www.keenlee.net/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础小结</title>
    <link href="https://www.keenlee.net/2018/08/08/Redis%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/08/08/Redis基础小结/</id>
    <published>2018-08-08T07:07:00.000Z</published>
    <updated>2018-09-11T09:47:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是redis？"><a href="#什么是redis？" class="headerlink" title="什么是redis？"></a>什么是redis？</h2><p>redis是一种内存中的数据结构存储系统，它可以用作数据库／缓存／消息中间件。</p><h2 id="redis常见的作用？"><a href="#redis常见的作用？" class="headerlink" title="redis常见的作用？"></a>redis常见的作用？</h2><p>项目中使用redis作为缓存使用，这样可以减轻数据库的压力，同时可以加快一些常用数据的查询效率。对于查询多修改少的数据进行缓存。<br><a id="more"></a></p><h2 id="数据库中的数据与缓存中的数据如何实现同步？"><a href="#数据库中的数据与缓存中的数据如何实现同步？" class="headerlink" title="数据库中的数据与缓存中的数据如何实现同步？"></a>数据库中的数据与缓存中的数据如何实现同步？</h2><p>同步是同程序员代码来实现控制的。具体操作是：</p><ol><li>当缓存中不存在数据时，先去数据库查询，成功后更新缓存。</li><li>当缓存中存在数据时，首先更新缓存中的数据，同时会生成对应的修改操作的key一张记录表，之后redis后台会有相关的机制（待查。。。），读取该列表的保存的key，找到对应的数据，同步更新到数据库中。</li></ol><h2 id="缓存中的数据如何实现持久化操作？为什么要进行持久化操作？"><a href="#缓存中的数据如何实现持久化操作？为什么要进行持久化操作？" class="headerlink" title="缓存中的数据如何实现持久化操作？为什么要进行持久化操作？"></a>缓存中的数据如何实现持久化操作？为什么要进行持久化操作？</h2><p>redis中有完善的持久化策略。</p><ul><li><p>RDB（默认）：这种备份方式的效率最高，在规定的时间周期内为数据进行备份，如在多少秒内进行了多少次set操作则进行一次备份，保存在rdb文件中，当redis重启之后会根据配置文件找到对应的备份文件还原数据。</p></li><li><p>AOF：实时的持久化策略，性能相对较低。有三种模式：</p><pre><code>always：执行一次set就持久化一次。everysec：每隔一秒进行一次持久化（常用）。no：持久化的时间由操作系统决定。（一般不配）</code></pre><p>因为redis中的数据保存在内存中，如果出现宕机或断电的情况，会使内存中的数据丢失。如果是当作数据库和消息队列来使用时，这样的数据是绝不允许丢失的。</p></li></ul><h2 id="redis如何管理维护自身内存大小的？"><a href="#redis如何管理维护自身内存大小的？" class="headerlink" title="redis如何管理维护自身内存大小的？"></a>redis如何管理维护自身内存大小的？</h2><p>redis有6种内存优化管理的策略。</p><ol><li>lru：删除最近最少使用的数据</li><li>volatile-lru:删除设定了超时时间的数据中找最近最少使用的数据</li><li>allkey-lru：所有的key根据lru算法进行删除</li><li>volatile-random：在设定了超时时间的数据中进行随机删除</li><li>allkey-random：在所有的key中进行随机删除</li><li>volatile-ttl：在设置了超时时间的数据中删除，将要超时的数据</li><li>noevication：默认策略，不会进行删除，当进行set操作时会返回报错信息</li></ol><h2 id="缓存中的数据结构是怎样的？支持的数据类型有哪些？"><a href="#缓存中的数据结构是怎样的？支持的数据类型有哪些？" class="headerlink" title="缓存中的数据结构是怎样的？支持的数据类型有哪些？"></a>缓存中的数据结构是怎样的？支持的数据类型有哪些？</h2><p>redis数据是通过key-value方式进行存储的。</p><p>redis支持五种基础数据类型：</p><p>string（字符串）：redis字符串是动态的，内部结构类似于Java的ArrayList，字符串最大长度为 512M 。</p><p>hash（哈希）：类似于Java的HashMap，数组+链表。不同的是字典的值只能是字符串，同时采用的是渐进式rehash策略。即保存了，新旧两个hash表，知道rehash全部完成，删除旧的。</p><p>hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。 hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。</p><p>list（列表）：类似于Java的LinkList（quickList），当列表元素较少时，采用ziplist（压缩列表）结构，连续的存储空间，节省存储空间，减轻内存碎片化 。当列表元素较多时，采用quicklist。将多个 <code>ziplist</code> 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。 </p><p>set（集合）：类似于Java的HashSet，可用作全局去重</p><p>zset（sorted set：有序集合）：类似于SortedSet+HashMap，内部是跳跃列表的结构。</p><p>高级数据类型：HyperLogLog（），Geo、Pub/Sub （不成熟，基本被放弃），stream（5.0）支持消息订阅，想代替mq？</p><h2 id="简述redis分片？为什么需要redis分片？"><a href="#简述redis分片？为什么需要redis分片？" class="headerlink" title="简述redis分片？为什么需要redis分片？"></a>简述redis分片？为什么需要redis分片？</h2><p>分片：根据某种规则…</p><p>分片的原因：</p><ol><li>redis内存满了，分片可实现动态扩容</li><li>redis服务器可能宕机，分片可以让每个节点保存一部分数据，宕机只会影响部分数据</li></ol><h2 id="简述redis哨兵机制？"><a href="#简述redis哨兵机制？" class="headerlink" title="简述redis哨兵机制？"></a>简述redis哨兵机制？</h2><p>使用哨兵机制实现redis的高可用。<br>哨兵机制实现原理：</p><ol><li>哨兵会主动给主机发送心跳检测，如果主机三次没有响应，则会推选出从机代替成为新的主机。</li><li>当新的主机被推选之后，会修改所有的主从配置文件，重新实现主从挂载。</li><li>客户端无需关注谁是主机，只需要通过哨兵操作redis。</li></ol><h2 id="redis中hash一致性？"><a href="#redis中hash一致性？" class="headerlink" title="redis中hash一致性？"></a>redis中hash一致性？</h2><ol><li>均衡性：尽可能的让数据均匀的落在不同的节点上。虚拟节点可以有效的平衡数据量</li><li>单调性：如果节点的数量发生改变，则需要进行重新运算，节点中的数据可以重新挂载</li><li>分散性：在分布式系统中，由于部分操作看不到全部的内存空间，相同的key落入不同的位置</li><li>负载：在分布式系统中，由于部分操作看不到全部的内存空间，不同的key落到同一个位置</li></ol><h2 id="redis集群搭建？"><a href="#redis集群搭建？" class="headerlink" title="redis集群搭建？"></a>redis集群搭建？</h2><h2 id="spring整合redis？"><a href="#spring整合redis？" class="headerlink" title="spring整合redis？"></a>spring整合redis？</h2><h2 id="redis作为分布式锁的使用？"><a href="#redis作为分布式锁的使用？" class="headerlink" title="redis作为分布式锁的使用？"></a>redis作为分布式锁的使用？</h2><h6 id="什么是redis分布式锁"><a href="#什么是redis分布式锁" class="headerlink" title="什么是redis分布式锁"></a>什么是redis分布式锁</h6><p>在分布式环境中，保证不同节点的线程同步执行。</p><h6 id="分布式锁实现的三个核心："><a href="#分布式锁实现的三个核心：" class="headerlink" title="分布式锁实现的三个核心："></a>分布式锁实现的三个核心：</h6><pre><code>1.加锁setnx（key , 1）当一个线程执行setnx返回1，说明原本的key不存在，该线程成功得到锁，否则说明该key已经存在，该线程抢锁失败。2.解锁    del(key)    释放锁之后，其他线程就可以继续执行setnx命令来获得锁3.超时锁1.为什么要有超时锁？答：当一个得到锁的线程在执行任务的过程中挂掉，来不及显示的释放锁，那么这块资源将会永远被锁住，其他线程再也无法进入了。setnx不支持超时参数，需要额外的指令：expire(key,30)</code></pre><h6 id="redis分布式锁中三个致命的问题"><a href="#redis分布式锁中三个致命的问题" class="headerlink" title="redis分布式锁中三个致命的问题"></a>redis分布式锁中三个致命的问题</h6><pre><code>场景一：    当某个线程执行setnx,成功得到了锁，但此时该节点挂了，却还没来得及执行expire指令，这样也会导致锁一直无法释放，即它们的执行不是原子性的。解决：（版本2.6.12以上版本）set(key,1,30,NX)取代setnx指令场景二：    假如A线程得到了锁，且成功得到了锁，并且设置了超时时间为30s,但如果A线程执行的很慢，超过30秒还没有执行完成，此时锁已经被超时释放，线程B获得了锁，当A执行完后，通过del指令来释放锁，但B线程还没有执行完，此时A线程把B现成的锁给释放了解决：可以在加锁的时候把当前线程的ID作为value，并在删除之前验证key对应的value是不是自己的线程ID。但是此时的判断和释放锁也不是原子性的，这里我们需要使用Lua脚本来实现，此时验证与释放为原子性操作了。String luaScript = &quot;if redis.call(&apos;get&apos;,KEY[1])==ARGV[1] then return redis.call(&apos;del&apos;,KEYS) else return 0 end&quot;redisClient.eval(luaScript,Collections.singletonList(key),Collections.singletonList(threadId));</code></pre><p>线程ID在多个进程下不是全局唯一 。这里可以使用全局唯一的业务ID，或者在线程ID前加上机器id</p><pre><code>场景三：在场景二中出现了两个线程访问同一个被锁的代码块的情况如何解决？    解决：让获得锁的线程开启一个守护线程，当主线程快过期但还没有执行结束时，为其续航，当主线程真正执行完成后，再显示的关掉守护线程另一种更优雅的实现方式，Zookeeper分布式锁zookeeper的可靠性是要大于使用redis实现的分布式锁的，但是相比而言，redis的性能更好redis官方推荐分布式锁：Redission2.8.1的redisson需要jackson 2.5+版本</code></pre><p>参考自：微信公众号-程序员小灰</p><p>当一个线程请求加锁失败了怎么办？重试策略：</p><ol><li>直接抛出异常，通知用户稍后重试；</li><li>sleep 一会再重试；</li><li>将请求转移至延时队列，过一会再试；</li></ol><h2 id="redis作为消息队列使用？"><a href="#redis作为消息队列使用？" class="headerlink" title="redis作为消息队列使用？"></a>redis作为消息队列使用？</h2><p>场景：用户下单，将用户生成展示的订单先处理完成，其他操作，则存入消息队列中，这样可以更快的响应用户请求，体验更好。</p><h2 id="redis中常用的操作命令？"><a href="#redis中常用的操作命令？" class="headerlink" title="redis中常用的操作命令？"></a>redis中常用的操作命令？</h2><p><a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">http://www.redis.cn/commands.html</a></p><h2 id="缓存和数据库双写数据一致性如何保证？"><a href="#缓存和数据库双写数据一致性如何保证？" class="headerlink" title="缓存和数据库双写数据一致性如何保证？"></a>缓存和数据库双写数据一致性如何保证？</h2><p>数据的一致性，包括强一致性和最终一致性，要求强一致性，则不要使用缓存。最终一致性也只是降低不一致发生的概率，无法完全避免。</p><p>读取数据一般没啥问题，主要是更新数据。</p><p>三种策略：</p><p>1.先更新数据库，再更新缓存</p><p>问题：线程安全问题,多线程更新，并发情况下脏读。在写多读少的情况下，缓存频繁更新，但很少使用到，浪费性能。（不推荐）</p><p>2.先删除缓存，再更新数据库</p><p>并发场景下，A线程更新，B线程读取,A删除了缓存，还没来得及更新数据库，此时B查询缓存无数据，进而查询数据库，再更新缓存，这将导致缓存中的值永远为旧的值（不设置过期时间，或者回收的情况下）。</p><p>解决：延时双删策略：就是在A更新完数据库1S(根据业务逻辑时间)后，再次删除缓存（开启另外一个线程）</p><p>3.先更新数据库，再删除缓存</p><p>首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。</p><p>参考：<a href="https://www.cnblogs.com/rjzheng/p/9041659.html" target="_blank" rel="noopener">https://www.cnblogs.com/rjzheng/p/9041659.html</a> </p><p>4.先更新缓存，再更新数据库</p><p>淘宝的一个场景读多写多 ，sql无序，使用过。</p><p>《从P1到P7——我在淘宝这7年》这篇博客原文 ：</p><p>在【招财进宝】项目中有一个技术的细节值得拿出来说说，淘宝商品详情页面每天的流量在10亿以上，里面的内容都是放在缓存里的，做【招财进宝】的时候，我们要给卖家显示他的商品被浏览的次数，这个数字必须实时更新，而用缓存的话一般都是异步更新的。于是商品表里面增加了这样一个字段，每增加一个PV这个字段就要更新一次。发布上去一个小时数据库就挂掉了，撑不住这么高的update。数据库撑不住怎么办？一般的缓存策略是不支持实时更新的，这时候多隆大神想了个办法，在apache上面写了一个模块，这个数字根本不经过下层的web容器（只经过apache）就写入一个集中式的缓存区了，这个缓存区的数据再异步更新到数据库。好像什么问题，到了多隆手里，总能迎刃而解。 </p><h2 id="redis是单线程的为什么那么快？"><a href="#redis是单线程的为什么那么快？" class="headerlink" title="redis是单线程的为什么那么快？"></a>redis是单线程的为什么那么快？</h2><ul><li><p>纯内存操作</p></li><li><p>单线程操作，避免了上下文的切换</p></li><li><p>采用了非阻塞式I/O多路复用机制（NIO）</p></li></ul><p>  参考：<a href="https://www.cnblogs.com/rjzheng/p/9096228.html" target="_blank" rel="noopener">https://www.cnblogs.com/rjzheng/p/9096228.html</a></p><h2 id="redis缓存雪崩，缓存穿透，缓存并发？"><a href="#redis缓存雪崩，缓存穿透，缓存并发？" class="headerlink" title="redis缓存雪崩，缓存穿透，缓存并发？"></a>redis缓存雪崩，缓存穿透，缓存并发？</h2><ul><li>缓存穿透：<br>场景：缓存穿透是指使用不存在的key进行大量的高并发访问，导致缓存无法命中，造成数据库压力过大，甚至压死。<br>解决方案：<ol><li>将所有数据hash到一个大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉。</li><li>将空的结果也放入缓存中，但给它一个默认值，并设置一个很短的生存时间这样第二次再访问就有值了，就不会访问数据库了。</li></ol></li><li><p>缓存并发：<br>场景：在高并发场景下，当一个缓存的key过期时，而当前key的访问量比较大，多个请求同时发现缓存过期，因此会访问数据库，导致数据库压力过大。<br>解决方案：</p><ol><li>分布式锁</li><li>本地锁（当一个服务有多个节点时不适用）</li><li>软过期（在业务数据中存储过期时间信息，由业务程序判断是否过期并更新，发现数据将要过期时，延长缓存的时间，同时派遣另一条线程去数据库获取最新的数据）</li></ol></li><li><p>缓存雪崩：<br>场景：缓存服务器重启或者大量的缓存在同一时间段内失效，导致数据库瞬时压力过大。<br>解决方案：对不同的数据使用不同的失效时间，如基础时间上加一个随机时间。</p><hr></li></ul><p><img src="http://wx2.sinaimg.cn/sq612/005AqIfAgy1fu2f631ch9j30k00k0wga.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是redis？&quot;&gt;&lt;a href=&quot;#什么是redis？&quot; class=&quot;headerlink&quot; title=&quot;什么是redis？&quot;&gt;&lt;/a&gt;什么是redis？&lt;/h2&gt;&lt;p&gt;redis是一种内存中的数据结构存储系统，它可以用作数据库／缓存／消息中间件。&lt;/p&gt;
&lt;h2 id=&quot;redis常见的作用？&quot;&gt;&lt;a href=&quot;#redis常见的作用？&quot; class=&quot;headerlink&quot; title=&quot;redis常见的作用？&quot;&gt;&lt;/a&gt;redis常见的作用？&lt;/h2&gt;&lt;p&gt;项目中使用redis作为缓存使用，这样可以减轻数据库的压力，同时可以加快一些常用数据的查询效率。对于查询多修改少的数据进行缓存。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="redis" scheme="https://www.keenlee.net/tags/redis/"/>
    
      <category term="缓存" scheme="https://www.keenlee.net/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="消息队列" scheme="https://www.keenlee.net/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="分布式锁" scheme="https://www.keenlee.net/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
</feed>
