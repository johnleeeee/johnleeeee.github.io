<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神圣的小白菜</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.keenlee.net/"/>
  <updated>2019-01-04T16:14:21.495Z</updated>
  <id>https://www.keenlee.net/</id>
  
  <author>
    <name>神圣的小白菜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次数据迁移</title>
    <link href="https://www.keenlee.net/2019/01/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"/>
    <id>https://www.keenlee.net/2019/01/04/记一次数据迁移/</id>
    <published>2019-01-04T15:11:10.000Z</published>
    <updated>2019-01-04T16:14:21.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>需要将一张老的阅读记录表中的数据迁移到新的阅读进度表中</p><p>问题：</p><ol><li>两张表的结构不同</li><li>表中的数据需要联表查询</li><li>旧表中的的一条数据对应新表的多条数据</li><li>存在需要过滤掉的脏数据（数据字段缺失，程序bug导致的脏数据）</li><li><p>新表中原本有记录，旧表中的记录插入新表时可能该条数据已经存在</p><a id="more"></a><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2></li><li><p>insert into select</p><p>优点：速度快<br>缺点：需要控制的条件多，sql写不来=_=!!!</p><p>上面的问题1（查询出对应字段就行），2（联表就行），3（每种分开进行就行），4（加条件判断就行）都不是问题；但是对于问题5:旧的表中有现在要插入的数据，则判断现在要插入的数据较新还是较旧，新的话就需要执行update而不是insert，旧的话就不用管；旧表中没有，则直接插入，这个不知道咋搞定了就，，，，，除非忽略（ignore）它或者采用类似于oracle的“merge into”（ON DUPLICATE KEY UPDATE abrp_index = VALUES (abrp_index), abrp_read_time = VALUES (abrp_read_time);）有就更新没有就插入（但这里需要判断谁新谁旧，所以，，，没想到办法了）。如果没有最后一个问题，300w的数据迁入秒级。</p></li><li><p>存储过程</p><p>优点：也是sql操作，方便给数据库管理者操作，方便控制多种条件<br>缺点：没第一种快<br>存储过程中，我使用游标对旧表的每条数据进行遍历，这样来操作每条数据，对每条数据进行判断，过滤出符合条件的数据，但这样是一条条的插入（不知道存储过程有没有可以先把过滤好的数据临时存起来再批量插入的方法），所以会相对较慢。300w的数据耗时约8分钟。</p><p>在使用存储过程遇到的问题，使用select 某字段 into 变量 from将表中的字段赋值给变量时，在游标的循环中，如果select时没有值的会直接跳出循环，，，查找资料后，在这种语句背后的将游标结束标志重新置为未结束的标志状态如： set done = TRUE;但是我这么使用后，发现次循环执行了两次，导致重复插入相同数据而报错，最后只好使用set 变量=（select 字段 from 表）;这种方式给需要查询的字段赋值。然后对查询的字段进行判断。可能是存储过程弄的还不是很清楚。喵了个咪。</p></li><li><p>Java程序</p><p>优点：操作对象进行判断和插入，对于程序员比较亲切，可以进行多线程处理。<br>缺点：需要进行数据库连接。不方便给数据库管理者操作<br>Java程序里使用Java对象进行操作，多线程操作，也不慢，比存储过程还稍微快一点，但最重要的是，无法交给数据库管理者操作。</p><p>在使用程序时，采用spring+mybatis+junit进行操作，采用注解的方式加载配置文件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(&#123;<span class="string">"classpath:spring/spring-*.xml"</span>&#125;)</span><br></pre></td></tr></table></figure><p>但当开启多线程执行是却无法执行，程序直接结束，也没有错误日志。之前一直以为是数据库连接池的问题，最后想想可能是因为主线程加载了配置，主线程结束后，spring的bean也被消除了。最后采用CountDownLatch阻止主线程结束，只有当所有的子线程执行完成后，再继续执行主线程，然后结束。这样就解决了问题。</p><p>还有一个坑爹的问题就是当把阅读进度表都迁移完成后，再根据进度表里的用户的阅读某本书的最新一条记录作为阅读记录存储，但是里面存在由于老程序bug导致脏数据（确认了是某appid是有错误的插入的），字段app_id本来与account_id是一一对应的，但出现了同一个account有两个appid。解决办法是，取account与app关系表中查询正确的对应关系的数据，然后采用存储过程，对该account_id的数据进行单独处理，即当有该account_id，数据时，查询其他条件相同，但account_id不等于该account_id时，是否有有数据，有说明该记录为脏数据，直接不处理，其他情况正常插入。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在数据迁移过程中有一个问题卡了很久，三个方法都用了，仅40w条数据需要执行数个小时甚至十几个小时。。。最后发现是一张表没有添加索引导致的，一个很简单的问题，用explain查看一下执行计划就能解决的问题，我竟然纠结了好几天，可能是因为初次操作，一直怀疑是不是自己的方法有问题，所以才上面三个方法都试过了，但最终都是慢到死，唯一使用Java程序，开启多线程跑了100分钟（至少相对另外两个跑一天，还是能看。。。。），但最后就在于一个索引，加上以后十几秒，几分钟就完成了。所以处理问题还是需要多思考一下，不要盲目，(≧▽≦)。</p><p>最终选择了存储过程来进行数据的迁移。虽然速度不及第一种快，但在当前是够用的，单个迁移不超过10分钟，可以接受，其次是需要联系数据库管理者进行操作，用Java程序显然不行，第一种由于数据中需要过滤的条件复杂，因此没用，所以最终决定采用存储过程进行数据迁移。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;需要将一张老的阅读记录表中的数据迁移到新的阅读进度表中&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两张表的结构不同&lt;/li&gt;
&lt;li&gt;表中的数据需要联表查询&lt;/li&gt;
&lt;li&gt;旧表中的的一条数据对应新表的多条数据&lt;/li&gt;
&lt;li&gt;存在需要过滤掉的脏数据（数据字段缺失，程序bug导致的脏数据）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新表中原本有记录，旧表中的记录插入新表时可能该条数据已经存在&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://www.keenlee.net/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://www.keenlee.net/tags/mysql/"/>
    
      <category term="数据迁移" scheme="https://www.keenlee.net/tags/%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>solr基础小结</title>
    <link href="https://www.keenlee.net/2018/12/11/solr%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/12/11/solr基础小结/</id>
    <published>2018-12-11T14:37:18.000Z</published>
    <updated>2018-12-11T16:09:27.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是solr"><a href="#1-什么是solr" class="headerlink" title="1.什么是solr"></a>1.什么是solr</h2><p><a href="https://baike.baidu.com/item/Solr/4101582?fr=aladdin" target="_blank" rel="noopener">Solr</a>是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。Solr是一个高性能，采用Java5开发，基于Lucene的全文搜索服务器。摘自百度百科。</p><p>环境：CentOS7+tomcat8.5+Java8+solr7.5+mysql8.5<br><a id="more"></a></p><h2 id="2-solr在Linux下的安装"><a href="#2-solr在Linux下的安装" class="headerlink" title="2.solr在Linux下的安装"></a>2.solr在Linux下的安装</h2><p>安装jdk省略</p><ol><li><p>到你想下载到的目录下下载solr：</p><p>wget <a href="http://mirror.bit.edu.cn/apache/lucene/solr/7.5.0/solr-7.5.0.tgz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/lucene/solr/7.5.0/solr-7.5.0.tgz</a></p></li><li><p>解压</p><p>tar -zxvf solr-7.5.0.tgz</p></li><li><p>启动</p><p>cd solr-7.5.0<br>bin/solr start启动，会有警告提示，根据提示，执行bin/solr start -force<br>启动完成后日志上会看到默认的端口port 8983</p></li><li><p>在浏览器上访问</p><p>ip:8983/solr即可访问</p></li></ol><p>这种方式虽然简单，但是solr为我们做的太多，目录过于臃肿，也不便于我们移植扩展，尤其是当我们需要多个solr实例的时候。</p><h2 id="3-solr部署到tomcat"><a href="#3-solr部署到tomcat" class="headerlink" title="3.solr部署到tomcat"></a>3.solr部署到tomcat</h2><p>安装tomcat省略</p><ol><li><p>将solr-7.5.0/server/solr-webapp目录下的内容copy到tomcat/webapps，并重命名为solr<br>没加-r会报错：cp: 略过目录”/usr/local/src/solr/solr-7.5.0/server/solr-webapp/webapp”<br>cp -r solr-7.5.0/server/solr-webapp/webapp webapps/solr</p></li><li><p>将solr-7.5.0/server/solr目录下的内容copy到solr-home下，solr-home自行创建，这是存放solr的一些配置文件的。<br>mkdir solr-home<br>cp -r /usr/local/src/solr/solr-7.5.0/server/solr/* solr-home/<br>或者直接（事先不创建solr-home文件夹）<br>cp -r /usr/local/src/solr/solr-7.5.0/server/solr solr-home/</p></li><li><p>修改tomcat/webapps/solr项目的web.xml文件添加如下配置，如果没有就直接添加即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">env-entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-name</span>&gt;</span>solr/home<span class="tag">&lt;/<span class="name">env-entry-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-value</span>&gt;</span>/usr/local/src/solr-tomcat/solr-home<span class="tag">&lt;/<span class="name">env-entry-value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">env-entry-type</span>&gt;</span>java.lang.String<span class="tag">&lt;/<span class="name">env-entry-type</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">env-entry</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>复制依赖jar包</p><ul><li>复制solr-7.5.0/server/lib/ext/下所有jar到tomcat/webapp/solr/WEB-INF/lib/下<br>​    cp solr-7.5.0/server/lib/ext/* WEB-INF/lib/</li><li>复制solr-7.5.0/server/lib下所有matrics开头的jar到tomcat/webapp/solr/WEB-INF/lib/下<br>​    cp solr-7.5.0/server/lib/metrics-* WEB-INF/lib/</li><li>复制solr/solr-7.5.0/dist/下的solr-clustering-7.5.0.jar solr-dataimporthandler-extras-7.5.0.jar<br>solr-dataimporthandler-7.5.0.jar两个jar复制到tomcat/webapp/solr/WEB-INF/lib/下<br>​    cp solr-7.5.0/dist/solr-clustering-7.5.0.jar WEB-INF/lib/<br>​    cp solr-7.5.0/dist/solr-dataimporthandler-7.5.0.jar WEB-INF/lib/<br>​    cp solr-7.5.0/dist/solr-dataimporthandler-extras-7.5.0.jar WEB-INF/lib/</li></ul></li><li><p>复制其他配置</p><p>复制solr-7.5.0/server/resources/log4j.properties配置文件到tomcat/webapps/solr/WEB-INF/lib/下或者tomcat/webapps/solr/WEB-INF/classes目录下<br>​    mkdir classes<br>​    cp solr-7.5.0/server/resources/log4j* classes/</p></li><li><p>启动tomcat</p><p>在浏览器上访问：ip:端口/solr/index.html</p><p>如果显示访问被拒绝，注释掉tomcat/solr下的web.xml的<security-constraint></security-constraint></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;security-constraint&gt;</span></span><br><span class="line"><span class="comment">    &lt;web-resource-collection&gt;</span></span><br><span class="line"><span class="comment">      &lt;web-resource-name&gt;Disable TRACE&lt;/web-resource-name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">      &lt;http-method&gt;TRACE&lt;/http-method&gt;</span></span><br><span class="line"><span class="comment">    &lt;/web-resource-collection&gt;</span></span><br><span class="line"><span class="comment">    &lt;auth-constraint/&gt;</span></span><br><span class="line"><span class="comment">  &lt;/security-constraint&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>保存后，稍等片刻重新访问即可。</p></li></ol><h2 id="4-solr的基本配置使用"><a href="#4-solr的基本配置使用" class="headerlink" title="4.solr的基本配置使用"></a>4.solr的基本配置使用</h2><ol><li><p>Add Core</p><p>此时会提示缺少solrconfig文件，将solr-7.5.0/server/solr/configsets/_default/conf文件夹复制到solr-home/Student下<br>cp -r /usr/local/src/solr/solr-7.5.0/server/solr/configsets/_default/conf Students/<br>再次点击Add Core，即可添加成功，并且此时再新建的Core：Students下新创建了两个文件/文件夹 core.properties（该core基本配置信息）和data（该core的数据目录）</p></li><li></li></ol><h2 id="5-配置中文分词器"><a href="#5-配置中文分词器" class="headerlink" title="5.配置中文分词器"></a>5.配置中文分词器</h2><p>两种任选一种</p><ol><li><p>solr自带中文分词器</p><p>将solr-7.5.0\contrib\analysis-extras\lucene-libs下的lucene-analyzers-smartcn-7.5.0.jar放到tomcat\webapps\solr\WEB-INF\lib下<br>在创建的Core的文件夹下的conf配置文件夹下的managed-schema添加如下配置即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik_zd"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span> <span class="attr">positionIncrementGap</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.apache.lucene.analysis.cn.smart.HMMChineseTokenizerFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.apache.lucene.analysis.cn.smart.HMMChineseTokenizerFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置IK中文分词器</p><p>本篇配置用的是GitHub上下载jar包ik-analyzer-solr7<br>将jar包copy到tomcat/webapps/solr/WEB-INF/lib目录下，将配置文件复制到classes目录下，详细参考GitHub上的教程。<br>在创建的Core的文件夹下的conf配置文件夹下的managed-schema添加如下配置即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.apache.lucene.analysis.ik.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">type</span>=<span class="string">"query"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tokenizer</span> <span class="attr">class</span>=<span class="string">"org.apache.lucene.analysis.ik.IKTokenizerFactory"</span> <span class="attr">useSmart</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">analyzer</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>查看效果</p></li></ol><h2 id="6-连接数据库"><a href="#6-连接数据库" class="headerlink" title="6.连接数据库"></a>6.连接数据库</h2><ol><li><p>在tomcat/webapps/solr/WEB-INF/lib目录下添加数据库驱动包mysql-connector-java-8.0.12.jar</p></li><li><p>修改core：Students的conf配置文件下的solrconfig.xml ，添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">requestHandler</span> <span class="attr">name</span>=<span class="string">"/dataimport"</span> <span class="attr">class</span>=<span class="string">"solr.DataImportHandler"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">"defaults"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"config"</span>&gt;</span>data-config.xml<span class="tag">&lt;/<span class="name">str</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">lst</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">requestHandler</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在同一目录下新建data-config.xml，配置数据源信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">name</span>=<span class="string">"mytest"</span> <span class="attr">type</span>=<span class="string">"JdbcDataSource"</span> <span class="attr">driver</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span> <span class="attr">url</span>=<span class="string">"jdbc:mysql://yourip:3306/mytest?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;autoReconnect=true&amp;amp;allowMultiQueries=true&amp;amp;DatabaseName=mytest"</span> <span class="attr">user</span>=<span class="string">"用户名"</span> <span class="attr">password</span>=<span class="string">"密码"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">document</span> <span class="attr">name</span>=<span class="string">"Students"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entity</span> <span class="attr">pk</span>=<span class="string">"sid"</span> <span class="attr">dataSource</span>=<span class="string">"mytest"</span> <span class="attr">name</span>=<span class="string">"student"</span>  <span class="attr">query</span>=<span class="string">"select sid,name,age,class_id,b_type from students"</span>&gt;</span>          </span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">name</span>=<span class="string">"sid"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"class_id"</span> <span class="attr">name</span>=<span class="string">"classId"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">"b_type"</span> <span class="attr">name</span>=<span class="string">"bookType"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加对应数据库字段的field</p><p>可直接在managed-schema文件中直接添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>也可使用管理平台进行添加，选择对应的core选择scheme，选择Add Field,添加对应的field</p></li><li><p>数据库数据导入</p><p>配置文件修改完成后，打开浏览器solr管理页面，进入Cord Admin重载code配置：reload<br>Code Selector选择对应code，进入Dataimport界面，导入数据：<br>切换至Query界面点击查询，即可看到导入的数据。<br>PS：每次修改配置文件，都需要重新执行导入，重建索引</p><p>清空数据：切换至Documents界面，Document Type选择XML，输入以下Document(s)并提交：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span>&gt;</span><span class="tag">&lt;<span class="name">query</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">query</span>&gt;</span><span class="tag">&lt;/<span class="name">delete</span>&gt;</span><span class="tag">&lt;<span class="name">commit</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>再次Query即可发现，数据已经清空。</p></li></ol><h2 id="7-在spring中的基本使用"><a href="#7-在spring中的基本使用" class="headerlink" title="7.在spring中的基本使用"></a>7.在spring中的基本使用</h2><p>增删改查，搜索关键字高亮显示</p><p>Pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.magese<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ik-analyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.solr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>solr-solrj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>solr.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOLR.URL=http://ip:8080/solr/Students</span><br></pre></td></tr></table></figure><p>spring-solr</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:/properties/solr.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"httpSolrClient"</span> <span class="attr">class</span>=<span class="string">"org.apache.solr.client.solrj.impl.HttpSolrClient"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"builder"</span> <span class="attr">ref</span>=<span class="string">"builder"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置响应解析器，solrj没有提供json解析器，所以通常用xml解析器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"parser"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.solr.client.solrj.impl.XMLResponseParser"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"builder"</span> <span class="attr">class</span>=<span class="string">"org.apache.solr.client.solrj.impl.HttpSolrClient.Builder"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"baseSolrUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;SOLR.URL&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Students.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.keenlee.solrtest;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.beans.Field;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lzq 2018/12/10 23:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Students</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Field</span>(value = <span class="string">"sid"</span>)</span><br><span class="line">        <span class="keyword">private</span> Integer sid;</span><br><span class="line">        <span class="meta">@Field</span>(value = <span class="string">"name"</span>)</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="meta">@Field</span>(value = <span class="string">"age"</span>)</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">        <span class="meta">@Field</span>(value = <span class="string">"classId"</span>)</span><br><span class="line">        <span class="keyword">private</span> Integer classId;</span><br><span class="line">        <span class="meta">@Field</span>(value = <span class="string">"bookType"</span>)</span><br><span class="line">        <span class="keyword">private</span> Integer bookType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">(Integer sid, String name, Integer age, Integer classId, Integer bookType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.classId = classId;</span><br><span class="line">        <span class="keyword">this</span>.bookType = bookType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(Integer sid)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name == <span class="keyword">null</span> ? <span class="keyword">null</span> : name.trim();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getClassId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> classId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassId</span><span class="params">(Integer classId)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.classId = classId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getBookType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookType</span><span class="params">(Integer bookType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookType = bookType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Students&#123;"</span> +</span><br><span class="line">                <span class="string">"sid="</span> + sid +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", classId="</span> + classId +</span><br><span class="line">                <span class="string">", bookType="</span> + bookType +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SolrTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.keenlee.solrtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.SolrQuery;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.impl.HttpSolrClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.response.QueryResponse;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lzq 2018/12/10 23:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solrDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:/spring/spring-solr.xml"</span>);</span><br><span class="line">        HttpSolrClient httpSolrClient = context.getBean(<span class="string">"httpSolrClient"</span>, HttpSolrClient.class);</span><br><span class="line">        <span class="comment">//创建请求对象</span></span><br><span class="line">        SolrQuery query = <span class="keyword">new</span> SolrQuery(<span class="string">"name:lzq"</span>);</span><br><span class="line">        query.setStart(<span class="number">0</span>);<span class="comment">//分页操作</span></span><br><span class="line">        query.setRows(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QueryResponse queryResponse = httpSolrClient.query(query);</span><br><span class="line">            List&lt;Students&gt; itemList = queryResponse.getBeans(Students.class);</span><br><span class="line">            <span class="comment">//由于查询的数据是document这样的对象其中包含属性值field,需要将</span></span><br><span class="line">            <span class="comment">//field中的属性值自动的为item对象赋值.</span></span><br><span class="line">            System.out.println(itemList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索结果：</p><h2 id="8-solrCould-zookeeper集群配置"><a href="#8-solrCould-zookeeper集群配置" class="headerlink" title="8.solrCould+zookeeper集群配置"></a>8.solrCould+zookeeper集群配置</h2><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9.总结"></a>9.总结</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是solr&quot;&gt;&lt;a href=&quot;#1-什么是solr&quot; class=&quot;headerlink&quot; title=&quot;1.什么是solr&quot;&gt;&lt;/a&gt;1.什么是solr&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/Solr/4101582?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Solr&lt;/a&gt;是一个独立的企业级搜索应用服务器，它对外提供类似于Web-service的API接口。Solr是一个高性能，采用Java5开发，基于Lucene的全文搜索服务器。摘自百度百科。&lt;/p&gt;
&lt;p&gt;环境：CentOS7+tomcat8.5+Java8+solr7.5+mysql8.5&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="lucene" scheme="https://www.keenlee.net/tags/lucene/"/>
    
      <category term="solr" scheme="https://www.keenlee.net/tags/solr/"/>
    
      <category term="全文搜索" scheme="https://www.keenlee.net/tags/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins部署Java项目基础小结</title>
    <link href="https://www.keenlee.net/2018/12/02/Jenkins%E9%83%A8%E7%BD%B2Java%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/12/02/Jenkins部署Java项目基础小结/</id>
    <published>2018-12-02T04:33:19.000Z</published>
    <updated>2018-12-04T01:23:29.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是Jenkins？"><a href="#1-什么是Jenkins？" class="headerlink" title="1.什么是Jenkins？"></a>1.什么是Jenkins？</h2><p>Jenkins是一个开源软件项目，是基于Java开发的一种<a href="https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/6250744" target="_blank" rel="noopener">持续集成</a>工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><ul><li><p>安装配置jdk</p></li><li><p>安装配置maven</p></li><li><p>安装Jenkins</p><p>cd /opt</p><ol><li><p>下载    wget <a href="http://mirrors.jenkins.io/war/2.83/jenkins.war" target="_blank" rel="noopener">http://mirrors.jenkins.io/war/2.83/jenkins.war</a></p></li><li><p>启动 java -jar jenkins.war &amp;</p><p>第一次启动会生成一个随机密码口令，cpoy该口令密码</p></li><li><p>浏览器访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 默认端口8080</p><p>可手动指定端口java -jar jenkins.war–httpPort=8081</p></li><li><p>第一进入需要输入上面复制的随机密码口令，即可进入配置</p></li></ol></li></ul><a id="more"></a><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h2><ol><li><p>进入插件安装界面，我们选择Install suggested plugins，官方推荐插件</p></li><li><p>进入了插件安装进度页，插件一次安装可能有些不成功，可点击retry重试，但我有两个无论咋retry都没有就直接跳过了，目前也没啥影响=_=!!!</p></li><li><p>进入用户创建页，输入信息，创建用户</p></li><li><p>登录成功后，进入主页，开始配置jdk路径。选择系统管理–&gt;全局工具配置，开始配置jdk，不选择自动安装。JAVA_HOME配置上面安装的目录地址。</p></li><li><p>配置Maven，不选择自动安装，MAVEN_HOME配置上面安装的目录地址</p></li><li><p>安装插件，很多插件是默认安装的，我们需要选择的插件Git plugin和Maven Integration plugin，publish over SSH。没有搜到的可能是已经安装过了，可以去已经安装的目录下看看。其他插件根据实际需要选择安装。</p></li><li><p>配置SSH免登录，配置Jenkins服务器与应用服务器的免密登录。</p><ol><li><p>在Jenkins服务器生成密钥：ssh-keygen -t rsa  确认保存文件直接回车默认，并设置了私钥文件的密码，会在/root/.ssh目录下生成了私钥id_rsa和公钥id_rsa.pub，该目录为隐藏目录。ssh-keygen -t rsa -c 你的邮箱。-c表示这个key所有的一个注释，为邮箱，不写-c 你的邮箱的话，会默认为：用户名@localhost.localdomain</p></li><li><p>在应用服务器执行相同的操作</p></li><li><p>将Jenkins服务器的公钥复制到应用服务器的.ssh/authorized_keys文件中，该文件不用创建，执行下面的命令即可<br>ssh-copy-id -i /root/.ssh/id_rsa.pub 用户名@应用服务器的ip</p><p>如果权限不够chmod 644 authorized_keys</p><p>执行时需要输入密码，即当前连接的用户名的登录密码。</p></li><li><p>重启应用服务器上的ssh服务，service sshd restart</p></li><li><p>测试是否可以免密登录，在A服务器执行 ：ssh 用户名@应用服务器ip。此时连接还是需要密码，但不是登录连接的密码，而是因为本地的私钥文件有加密密码，我们可以使用openssl取消密码。还有注意关闭防火墙。</p></li><li><p>退出连接，执行exit即可</p></li></ol></li><li><p>配置Push SSH</p><p>选择系统管理–&gt;系统设置–&gt;选择Publish over SSH</p><p>Passphrase：为私钥文件的密码</p><p>Path to key：私钥文件的地址：/root/.ssh/id_rsa</p><p>SSH Servers 下的配置</p><p>​    Name：规则内随便起名 Hostname：应用服务器的地址  Username：用户名 Remote Directory：这个远程地址即文件copy的地址，如：/usr/local/src/tomcat/apache-tomcat-8.5.35/，选择Add可配置多个应用服务器。</p></li></ol><h2 id="4-部署项目"><a href="#4-部署项目" class="headerlink" title="4.部署项目"></a>4.部署项目</h2><ol><li><p>选择新建任务，输入项目名称，名称需要与部署的项目名一致。选择构建一个maven项目，点击确定。</p></li><li><p>项目配置</p><ul><li><p>通用配置，选择丢弃旧的构建，保持构建天数10天，保持最大的构建个数10个</p></li><li><p>源码管理，选择版本控制工具，这里用svn，所以选择Subversion</p><p>Repository URL：项目的URL地址。如：<a href="http://172.16.*.*/svn/repos/simpledemo/trunk@HEAD，@HEAD意思取最新版本。" target="_blank" rel="noopener">http://172.16.*.*/svn/repos/simpledemo/trunk@HEAD，@HEAD意思取最新版本。</a></p><p>Credentials:添加Add：也就是该仓库的用户密码</p></li><li><p>构建环境：勾选Add timestamps to the Console Output</p></li><li><p>Pre Steps：build前的操作设置</p></li><li><p>Build：在Build中输入打包前的mvn命令，如clean install -Dmaven.test.skip=true -Ptest  #排除测试的包内容，即后缀为test的配置文件。</p></li><li><p>Post Steps ：选择 Run only if build succeeds</p><p>SSH Server的name与前面全局配置下的Server选择对应的</p><p>Transfers</p><p>​    source files：Jenkins服务器下下来的项目打包的源文件，如target/simpledemo.jar</p><p>​    Remove profix：即复制过去的时候去除前缀，如target/</p><p>​    Remote directory: 将项目复制到应用服务器的地址，再加上前面全局配置的Remote directory，就是完整的地址。如：webapps/，则此时的完整路径为：/usr/local/src/tomcat/apache-tomcat-8.5.35/webapps/</p><p>​    Exec command：执行可执行文件。如；sh Jenkins-in/data-in.sh，即应用服务器，该地址下配置该脚本文件，即地址：/root/Jenkins-in/data-in.sh</p></li></ul></li><li><p>可执行脚本文件</p><p>  脚本文件可按照如下书写（该脚本添加在应用服务器/root/Jenkins-in/data-in.sh下，即Exec command配置的路径）：</p><ul><li><p>普通的Java项目，部署到tomcat下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line"><span class="meta">#</span>java enviroment</span><br><span class="line">export JAVA_HOME=/usr/local/src/java/jdk1.8.0_191</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br><span class="line"></span><br><span class="line">tomcat_home=/usr/local/src/tomcat/apache-tomcat-8.5.35</span><br><span class="line">SHUTDOWN=$tomcat_home/bin/shutdown.sh</span><br><span class="line">STARTTOMCAT=$tomcat_home/bin/startup.sh</span><br><span class="line">echo "关闭$tomcat_home"</span><br><span class="line"><span class="meta">$</span>SHUTDOWN</span><br><span class="line"><span class="meta">#</span>杀死tomcat进程</span><br><span class="line">ps -ef|grep tomcat|grep java|awk '&#123;print $2&#125;'|xargs kill -9</span><br><span class="line"><span class="meta">#</span>删除日志文件，如果你不先删除可以不要下面一行</span><br><span class="line">rm  $tomcat_home/logs/* -rf</span><br><span class="line"><span class="meta">#</span>删除tomcat的临时目录</span><br><span class="line">rm  $tomcat_home/work/* -rf</span><br><span class="line">sleep 5</span><br><span class="line">echo "启动$tomcat_home"</span><br><span class="line"><span class="meta">$</span>STARTTOMCAT</span><br><span class="line"><span class="meta">#</span>看启动日志</span><br><span class="line"><span class="meta">#</span>tail -f $tomcat_home/logs/catalina.out</span><br></pre></td></tr></table></figure></li><li><p>Springboot项目部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">TE=$(date +%Y%m%d)</span><br><span class="line">export JAVA_HOME PATH CLASSPATH</span><br><span class="line">JAVA_HOME=/usr/local/src/java/jdk1.8.0_191</span><br><span class="line">PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH</span><br><span class="line">DIR=/root/simpledemo</span><br><span class="line">JARFILE=simpledemo.jar</span><br><span class="line"></span><br><span class="line">if [ ! -d $DIR/backup ];then</span><br><span class="line">   mkdir -p $DIR/backup</span><br><span class="line">fi</span><br><span class="line">cd $DIR</span><br><span class="line"></span><br><span class="line">ps -ef | grep $JARFILE | grep -v grep | awk '&#123;print $2&#125;' | xargs kill -9</span><br><span class="line">mv $JARFILE backup/$JARFILE$DATE</span><br><span class="line">mv -f /root/Jenkins-in/$JARFILE .</span><br><span class="line"></span><br><span class="line">java -jar $JARFILE &gt; out.log &amp;</span><br><span class="line">if [ $? = 0 ];then</span><br><span class="line">        sleep 30</span><br><span class="line">        tail -n 50 out.log</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cd backup/</span><br><span class="line">ls -lt|awk 'NR&gt;5&#123;print $NF&#125;'|xargs rm -rf</span><br></pre></td></tr></table></figure><p>kill旧项目，删除旧项目，启动新项目，备份老项目</p></li></ul></li></ol><h2 id="5-构建项目"><a href="#5-构建项目" class="headerlink" title="5.构建项目"></a>5.构建项目</h2><ol><li>选择需要构建的项目，点击立即构建即可</li><li>当构建完成后在Build History有构建的历史，可点击进入，可查看当前构建的信息</li><li>当构建失败，或者显示构建成功，但通过浏览器无法访问，可选择Console Output查看当前构建的日志信息，通过日志找出问题，解决即可。</li></ol><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>以现在的学习和用途来看，Jenkins就是一个可配置的，从代码仓库下载打包文件，然后复制到服务器，通过ssh远程执行服务器的脚本文件，实现项目的部署，同时还有一些更高级的配置，方便我们部署，管理，测试。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是Jenkins？&quot;&gt;&lt;a href=&quot;#1-什么是Jenkins？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是Jenkins？&quot;&gt;&lt;/a&gt;1.什么是Jenkins？&lt;/h2&gt;&lt;p&gt;Jenkins是一个开源软件项目，是基于Java开发的一种&lt;a href=&quot;https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/6250744&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;持续集成&lt;/a&gt;工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。&lt;/p&gt;
&lt;h2 id=&quot;2-安装&quot;&gt;&lt;a href=&quot;#2-安装&quot; class=&quot;headerlink&quot; title=&quot;2.安装&quot;&gt;&lt;/a&gt;2.安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装配置jdk&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装配置maven&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Jenkins&lt;/p&gt;
&lt;p&gt;cd /opt&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载    wget &lt;a href=&quot;http://mirrors.jenkins.io/war/2.83/jenkins.war&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://mirrors.jenkins.io/war/2.83/jenkins.war&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动 java -jar jenkins.war &amp;amp;&lt;/p&gt;
&lt;p&gt;第一次启动会生成一个随机密码口令，cpoy该口令密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器访问：&lt;a href=&quot;http://localhost:8080/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:8080/&lt;/a&gt; 默认端口8080&lt;/p&gt;
&lt;p&gt;可手动指定端口java -jar jenkins.war–httpPort=8081&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第一进入需要输入上面复制的随机密码口令，即可进入配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://www.keenlee.net/categories/Jenkins/"/>
    
    
      <category term="持续集成" scheme="https://www.keenlee.net/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="Jenkins" scheme="https://www.keenlee.net/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo-next搭建本站</title>
    <link href="https://www.keenlee.net/2018/11/30/%E5%9F%BA%E4%BA%8Ehexo-next%E6%90%AD%E5%BB%BA%E6%9C%AC%E7%AB%99/"/>
    <id>https://www.keenlee.net/2018/11/30/基于hexo-next搭建本站/</id>
    <published>2018-11-30T09:50:11.000Z</published>
    <updated>2018-12-11T14:35:37.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><ul><li>安装git</li><li>安装node.js</li><li>安装hexo</li></ul><a id="more"></a><h2 id="插件："><a href="#插件：" class="headerlink" title="插件："></a>插件：</h2><ul><li>微博图床</li><li>网易云音乐外链</li><li>leanCloud:访问量统计 valine评论</li><li>不蒜子：全站总访问量</li><li>hexo-wordcount:字数统计，阅读量统计等</li><li>addthis社会化分享</li><li>daovoice在线沟通</li><li>fontawesome矢量图标</li><li>Gulp博文压缩</li><li>腾讯公益404</li></ul><h2 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h2><ul><li>1.访问人数统计 </li><li>2.文章阅读次数 </li><li>3.文章字数</li><li>4.文章阅读时长预测 </li><li>5.博客总字数 </li><li>6.文章加密 </li><li>7.社会化分享 </li><li>8.文章评论</li><li>9.在线沟通</li><li>10.网易云音乐播放外链</li><li>11.站外链接 </li><li>12.友情链接 </li><li>13.站点运行时间 </li><li>14.博客粒子背景 </li><li>15.跳动红心 </li><li>16.文章赞赏 </li><li>17.标签优化 </li><li>18.文章结束提示语 </li><li>19.首页头部美化 </li><li>20.GitHub角标 </li><li>21.腾讯公益404 </li><li>22.文章版权信息</li><li>23.移动端与网页端差异化展示</li></ul><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><ul><li>…</li></ul><h2 id="待完善的功能："><a href="#待完善的功能：" class="headerlink" title="待完善的功能："></a>待完善的功能：</h2><ul><li>博客宠物</li><li>图片板块</li><li>音乐板块</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境：&quot;&gt;&lt;a href=&quot;#环境：&quot; class=&quot;headerlink&quot; title=&quot;环境：&quot;&gt;&lt;/a&gt;环境：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装git&lt;/li&gt;
&lt;li&gt;安装node.js&lt;/li&gt;
&lt;li&gt;安装hexo&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.keenlee.net/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.keenlee.net/tags/Hexo/"/>
    
      <category term="hero-next" scheme="https://www.keenlee.net/tags/hero-next/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7搭建SVN服务基础小结</title>
    <link href="https://www.keenlee.net/2018/11/27/CentOS7%E6%90%AD%E5%BB%BASVN%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/11/27/CentOS7搭建SVN服务基础小结/</id>
    <published>2018-11-27T01:35:08.000Z</published>
    <updated>2018-12-02T04:38:50.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h2><p>环境：CentOS7，subversion-1.7.14</p><ol><li><p>查看是否已经安装过<br>find / -name subversion</p></li><li><p>开始安装<br>yum install subversion</p></li><li><p>查看安装目录<br>rpm -pl subversion</p></li><li><p>查看一下系统是否默认绑定了svn根目录路径<br>ps -ef|grep svnserve<br>如果已经绑定则 kill -9 pid</p></li></ol><a id="more"></a><h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h2><p>注意仓库根目录与版本库的区别</p><ol><li><p>创建仓库根目录<br>mkdir -p /var/svn/svnrepos</p></li><li><p>创建项目版本库<br>cd /var/svn/svnrepos<br>svnadmin create testsvn</p></li></ol><h2 id="3-修改版本库配置"><a href="#3-修改版本库配置" class="headerlink" title="3.修改版本库配置"></a>3.修改版本库配置</h2><p>   cd testsvn/conf<br>   ls<br>   authz  passwd  svnserve.conf</p><ul><li><p>authz 是权限控制文件(添加用户和分组及它们的读写权限)<br>vi authz<br>[/]            #权限的目录，此处为仓库下的所有文件<br>admin=rw    #可读写<br>test1=r         #可读<br>*=            #通配其它，无权限</p><p>另可配置分组权限配置<br>[groups]<br>group1 = admin<br>group2 = test1,test2<br>[/]<br>@group1 = rw<br>@group2 = r<br>*=r<br>此时admin与test1可读可写，test2只可读</p></li><li><p>passwd 是帐号密码文件<br>vi passwd<br>admin=123456    #账号=密码</p></li><li><p>svnserve.conf 是SVN服务配置文件<br>vi svnserve.conf<br>打开下面的5个注释<br>anon-access = read #匿名用户可读<br>auth-access = write #授权用户可写<br>password-db = passwd #使用哪个文件作为账号文件（就是上面的那个文件）<br>authz-db = authz #使用哪个文件作为权限文件（就是上面的那个文件）<br>realm = /var/svn/svnrepos # 认证空间名，版本库所在目录<br>注意：删除#号注释时前面不要留空格，否则后面连接时会报错</p></li></ul><h2 id="4-启动与关闭"><a href="#4-启动与关闭" class="headerlink" title="4.启动与关闭"></a>4.启动与关闭</h2><ul><li><p>启动服务<br>svnserve -d -r /var/svn/svnrepos    #-d表示守护进程， -r表示在后台执行</p></li><li><p>关闭服务<br>ps -ef|grep svnserve<br>kill -9 pid</p></li></ul><h2 id="5-客户端连接"><a href="#5-客户端连接" class="headerlink" title="5.客户端连接"></a>5.客户端连接</h2><p>注意关闭防火墙<br>systemctl stop firewalld.service<br>查看防火墙状态<br>firewall-cmd –state    </p><p>windows可使用TortoiseSVN，Mac上可使用cornerstone。<br>也可以使用eclipse，idea等开发工具连接<br>输入地址格式：svn://ip:port/版本库名称（默认端口3690）<br>如：svn://ip:3690/testsvn</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-下载安装&quot;&gt;&lt;a href=&quot;#1-下载安装&quot; class=&quot;headerlink&quot; title=&quot;1.下载安装&quot;&gt;&lt;/a&gt;1.下载安装&lt;/h2&gt;&lt;p&gt;环境：CentOS7，subversion-1.7.14&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看是否已经安装过&lt;br&gt;find / -name subversion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开始安装&lt;br&gt;yum install subversion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看安装目录&lt;br&gt;rpm -pl subversion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看一下系统是否默认绑定了svn根目录路径&lt;br&gt;ps -ef|grep svnserve&lt;br&gt;如果已经绑定则 kill -9 pid&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.keenlee.net/categories/Linux/"/>
    
    
      <category term="centos7" scheme="https://www.keenlee.net/tags/centos7/"/>
    
      <category term="svn" scheme="https://www.keenlee.net/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ基础小结</title>
    <link href="https://www.keenlee.net/2018/09/11/rabbitmq%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/09/11/rabbitmq基础小结/</id>
    <published>2018-09-11T09:35:00.000Z</published>
    <updated>2018-09-11T09:36:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是RabbitMQ？"><a href="#1-什么是RabbitMQ？" class="headerlink" title="1.什么是RabbitMQ？"></a>1.什么是RabbitMQ？</h2><p>RabbitMQ作为消息中间件，可以平衡数据库压力，实现入库的异步操作，是一个在<a href="https://baike.baidu.com/item/AMQP" target="_blank" rel="noopener">AMQP</a>基础上完成的，可复用的企业消息系统。<br>Broker：简单来说就是消息队列服务器实体。 　　<br>Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。 　　<br>Queue：消息队列载体，每个消息都会被投入到一个或多个队列。 　　<br>Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。　　<br>Routing Key：路由关键字，<br>exchange根据这个关键字进行消息投递。 　　<br>vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。 　　<br><a id="more"></a><br>producer：消息生产者，就是投递消息的程序。 　　<br>consumer：消息消费者，就是接受消息的程序。 　　<br>channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。</p><p>原理图：</p><p><img src="http://wx3.sinaimg.cn/mw690/005AqIfAgy1fug8hem4fcj30xi0kgjtl.jpg" alt="img"></p><p>思维导图：</p><p><img src="http://wx3.sinaimg.cn/mw690/005AqIfAgy1fugl2jl7brj30nl0demxt.jpg" alt="img"></p><p>参考：<a href="https://www.cnblogs.com/linkenpark/p/5393666.html" target="_blank" rel="noopener">https://www.cnblogs.com/linkenpark/p/5393666.html</a></p><h2 id="2-RabbitMQ的工作模式？"><a href="#2-RabbitMQ的工作模式？" class="headerlink" title="2.RabbitMQ的工作模式？"></a>2.RabbitMQ的工作模式？</h2><ol><li><p>简单模式</p><p>提供者将消息写入队列，如果队列中没有其他消息，则消息会在第一时间被处理<br>消费者会实时监控队列中是否有消息，如果有则进行处理</p></li><li><p>工作模式／双工模式</p><p>由一个生产者生产，多个消费者进行争抢，谁抢到谁执行</p></li><li><p>发布订阅模式（fanout）</p><p>生产者通过交换机，将消息发往不同的队列，每个消费者只关注自己的队列，对自己的队列消息进行消费（一个消息被消费多次，适合群发和广播）</p></li><li><p>路由模式（redirect）</p><p>消费者通过交换机，根据不同的路由key将消息发往不同的队列中，通过路由key的比较，将消息发往特定消费者的队列中（特殊的订阅模式）</p></li><li><p>主题模式（topic）</p><p>通过通配符*（一个或多几个字符）或#（任意类型，可以匹配多个字符串）将消费发往匹配的路由key的消息队列中（特殊的路由模式）</p><p>参考：<a href="http://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">http://www.rabbitmq.com/getstarted.html</a></p></li></ol><h2 id="3-具体应用场景？"><a href="#3-具体应用场景？" class="headerlink" title="3.具体应用场景？"></a>3.具体应用场景？</h2><h2 id="4-如何保证消息队列的消息一定被消费？如何保证消息不被重复消费？如何保证消息的执行顺序？"><a href="#4-如何保证消息队列的消息一定被消费？如何保证消息不被重复消费？如何保证消息的执行顺序？" class="headerlink" title="4.如何保证消息队列的消息一定被消费？如何保证消息不被重复消费？如何保证消息的执行顺序？"></a>4.如何保证消息队列的消息一定被消费？如何保证消息不被重复消费？如何保证消息的执行顺序？</h2><p>Rabbit通过Ack机制机制上，通过先缓存发送的消息，直到得到Ack再删除message，否则从新发送消息，可开启一条线程来进行消息超时的检查。来确保消费被正确发送和消费。</p><p>开启持久化策略，保证服务器在宕机时，消息不会丢失，当会影响性能。<br>当消息被消费，但返回ACK出现问题，会导致，消息重发，重复消费，需要保证业务逻辑的幂等性。可以用db记录消息的消费状态（取消／失败／成功）表示已经被消费了。直接返回ack消息。</p><h2 id="5-RabbitMQ在项目中的使用步骤？spring-rabbit整合？"><a href="#5-RabbitMQ在项目中的使用步骤？spring-rabbit整合？" class="headerlink" title="5.RabbitMQ在项目中的使用步骤？spring-rabbit整合？"></a>5.RabbitMQ在项目中的使用步骤？spring-rabbit整合？</h2><ol><li><p>导入jar包。（新版本的包各种报错，搞不来…）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建rabbitmq.properties文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rabbit.ip=172.16.81.134</span><br><span class="line">rabbit.port=5672</span><br><span class="line">rabbit.username=lzq</span><br><span class="line">rabbit.password=123</span><br><span class="line">virtual-host=/</span><br></pre></td></tr></table></figure></li><li><p>配置spring-Rabbit-send.xml文件，创建连接工厂／创建交换机（可配置自动持久化）／定义rabbitTemplate模版配置连接工厂</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans-4.1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义RabbitMQ的连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">host</span>=<span class="string">"$&#123;rabbit.ip&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">"$&#123;rabbit.port&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">"$&#123;rabbit.username&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">"$&#123;rabbit.password&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">"$&#123;virtual-host&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MQ的管理，包括队列、交换器等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义交换机 自动声明 持久化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">name</span>=<span class="string">"orderExchange"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span> <span class="attr">durable</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义rabbit模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">exchange</span>=<span class="string">"orderExchange"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置连接工厂／定义消息队列／定义交换机（绑定队列，定义路由key）／定义监听，配置监听服务，方法，监听的队列</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans-4.1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 1.定义RabbitMQ的连接工厂 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">host</span>=<span class="string">"$&#123;rabbit.ip&#125;"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">port</span>=<span class="string">"$&#123;rabbit.port&#125;"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">username</span>=<span class="string">"$&#123;rabbit.username&#125;"</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">password</span>=<span class="string">"$&#123;rabbit.password&#125;"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">virtual-host</span>=<span class="string">"$&#123;virtual-host&#125;"</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- MQ的管理，包括队列、交换器等 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 定义消息队列 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">"orderQueue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 定义交换机，并且完成队列和交换机的绑定 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">name</span>=<span class="string">"orderExchange"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- key：路由key --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">"orderQueue"</span> <span class="attr">key</span>=<span class="string">"save.order"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--自定义bean处理消息队列中的内容--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"rabbitOrderListener"</span> <span class="attr">class</span>=<span class="string">"net.keenlee.pakchoi.test.listener.RabbitOrderListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 定义监听 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">acknowledge</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 监听一个队列，当队列中有消息，就会自动触发类.方法，传递消息就作为方法的参数，根据方法声明的参数强转 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"rabbitOrderListener"</span> <span class="attr">method</span>=<span class="string">"onMessage"</span> <span class="attr">queues</span>=<span class="string">"orderQueue"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用rabbitTemplate操作消息队列</p><p>发送者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.keenlee.pakchoi.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.keenlee.pakchoi.test.service.RabbitMQOrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRabbitmqController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitMQOrderService rabbitMQOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"saveOrder"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//下单</span></span><br><span class="line">        rabbitMQOrderService.saveOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.keenlee.pakchoi.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RabbitMQOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.keenlee.pakchoi.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.keenlee.pakchoi.test.service.RabbitMQOrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQOrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">RabbitMQOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//下单</span></span><br><span class="line">        System.out.println(<span class="string">"订单保存成功！"</span>);</span><br><span class="line">        System.out.println(<span class="string">"向消息队列发送消息..."</span>);</span><br><span class="line">        <span class="comment">//发送邮件</span></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"save.order"</span>,<span class="string">"恭喜你，下单成功！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.keenlee.pakchoi.test.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitOrderListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendEmail(<span class="keyword">new</span> String(message.getBody(),<span class="string">"utf-8"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到消息队列的消息:"</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://wx1.sinaimg.cn/mw690/005AqIfAgy1fv5q4q0k5zj30ho03gjrz.jpg" alt="img"></p></li><li><p>改造1:断开重试机制</p></li><li><p>改造2:消息确认消费</p></li><li><p>改造3:保证消息幂等性</p></li><li><p>改造4:…</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是RabbitMQ？&quot;&gt;&lt;a href=&quot;#1-什么是RabbitMQ？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是RabbitMQ？&quot;&gt;&lt;/a&gt;1.什么是RabbitMQ？&lt;/h2&gt;&lt;p&gt;RabbitMQ作为消息中间件，可以平衡数据库压力，实现入库的异步操作，是一个在&lt;a href=&quot;https://baike.baidu.com/item/AMQP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AMQP&lt;/a&gt;基础上完成的，可复用的企业消息系统。&lt;br&gt;Broker：简单来说就是消息队列服务器实体。 　　&lt;br&gt;Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。 　　&lt;br&gt;Queue：消息队列载体，每个消息都会被投入到一个或多个队列。 　　&lt;br&gt;Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。　　&lt;br&gt;Routing Key：路由关键字，&lt;br&gt;exchange根据这个关键字进行消息投递。 　　&lt;br&gt;vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。 　　&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="消息队列" scheme="https://www.keenlee.net/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="https://www.keenlee.net/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>mycat配置基础小结</title>
    <link href="https://www.keenlee.net/2018/08/20/mycat%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/08/20/mycat基础小结/</id>
    <published>2018-08-20T12:35:00.000Z</published>
    <updated>2018-09-11T09:48:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-数据库热备原理？"><a href="#1-数据库热备原理？" class="headerlink" title="1.数据库热备原理？"></a>1.数据库热备原理？</h2><ol><li>二进制日志文件。当主数据库发生更新时，会将更新的数据写入二进制文件中。</li><li>I／O线程。从机实时监听二进制文件是否有更新操作，如果有更新操作则读取更新的内容。</li><li>中继日志。保存主库更新的数据（临时存储）。</li><li>SQl线程。将中继日志的信息更新到数据库中。</li></ol><a id="more"></a><h2 id="2-如何配置主从数据库？"><a href="#2-如何配置主从数据库？" class="headerlink" title="2.如何配置主从数据库？"></a>2.如何配置主从数据库？</h2><ol><li>为mysql的配置文件my.cnf，默认条件下的二进制日志文件是关闭的。</li><li>实现主从挂载（互为主从：双机热备）<br>注意：<ul><li>server-id不能重复。</li><li>服务器不能连接：关闭防火墙／IP地址是否正确。</li><li>找不到日志文件：日志文件写错。</li></ul></li><li>主从同步应注意哪些问题？<br>当进行主从挂载时，post位置可以从0开始，但必须保证主从库表一致。<br>进行主从同步时，都是由同一个sql转储文件导入之后再进行数据挂载，这样能极大的降低从库的负载，减轻数据不同步的影响</li></ol><h2 id="3-主从同步延时-不一致解决方案？"><a href="#3-主从同步延时-不一致解决方案？" class="headerlink" title="3.主从同步延时/不一致解决方案？"></a>3.主从同步延时/不一致解决方案？</h2><h2 id="4-mycat的作用？"><a href="#4-mycat的作用？" class="headerlink" title="4.mycat的作用？"></a>4.mycat的作用？</h2><p>mycat是一个高性能的数据库中间件。</p><ol><li>支持心跳检测机制，实现数据库的高可用</li><li>实现数据库的读写分离和主从复制</li><li>支持分库分表</li></ol><h2 id="5-mycat主从搭建？主要步骤及配置？"><a href="#5-mycat主从搭建？主要步骤及配置？" class="headerlink" title="5.mycat主从搭建？主要步骤及配置？"></a>5.mycat主从搭建？主要步骤及配置？</h2><p>mysql数据库实现了完善的数据库备份机制。</p><ol><li><p>搭建主库：</p><ul><li><p>开放数据库权限，导入数据库文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;root&apos;;（测试的时候all,开启起了所有权限，这是危险的）</span><br></pre></td></tr></table></figure></li><li><p>开启二进制文件,编辑mysql系统配置文件my.cnf(指定mysql端口，数据库位置)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#指定数据库存储路径</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line">#制定serverid，不能与集群中另一个相同</span><br><span class="line">server-id=1</span><br><span class="line">#开启二进制日志文件</span><br><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure></li><li><p>重启服务，检查二进制文件是否启动</p><p>cd /var/lib/mysql是否存在mysql-bin.000001。每次重启编号加1。</p></li></ul></li><li><p>搭建从库：</p><ul><li>与主库一样修改my.cnf文件，但server-id不能一样</li></ul></li><li><p>主从连接:</p><ul><li><p>查看主库状态SHOW MASTER status，查看它的position</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status</span><br></pre></td></tr></table></figure></li><li><p>实现主从挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#实现主从的挂载  主机的ip 端口  </span><br><span class="line">#用户名和密码  二进制日志文件 文件的位置</span><br><span class="line">change MASTER to MASTER_HOST=&quot;192.168.126.137&quot;,</span><br><span class="line">MASTER_PORT=3306,MASTER_user=&quot;root&quot;,</span><br><span class="line">MASTER_PASSWORD=&quot;root&quot;,</span><br><span class="line">MASTER_LOG_FILE=&quot;mysql-bin.000001&quot;,</span><br><span class="line">MASTER_LOG_POS=120</span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动从服务器，查看从服务状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#检测主从服务启动是否正确 （查看Slave_IO_Runing=yes,Slave_SQL_Runing=yes）</span><br><span class="line">show SLAVE STATUS</span><br></pre></td></tr></table></figure><p>如果slave_IO_Running和slave_SQL_Running的值为yes说明搭建成功。<br><img src="http://wx2.sinaimg.cn/mw690/005AqIfAgy1fugai4f8vrj30co01v3yb.jpg" alt="img"><br><strong>注意</strong>：单纯的主从会存在问题。当主库宕机整个服务都将无法使用，假设配置了一主多从，当主机宕机，从机成为新的主机，但与原有的从机不存在主从关系，导致数据无法同步，解决双机热备。</p></li><li><p>配置jdk，编写两个配置文件schema.xml和server.xml两个配置文件</p><p>schema.xml 主要配置：</p><ul><li><p>配置dataNode：表示数据库节点信息（节点名称／节点主机／数据库名称）</p></li><li><p>配置dataHost：表示节点主机（节点主机名／最大连接数／最小连接数／读写分离策略（balance：0:读操作发往writeHost。1:读操作发往readHost和闲置主节 writeType：0:所有的写操作都会发往第一台writeHost中。1:写操作随机发往writeHost主机／数据库类型／数据库驱动／高可用切换类型switchType：-1不自动切换，1，自动切换心跳检测heratbeat））</p></li><li><p>配置writeHost及对应的readHost（名字／IP：port／用户／密码）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--name属性是自定义的  dataNode表示数据库的节点信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"mytest"</span> <span class="attr">checkSQLschema</span>=<span class="string">"false"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"100"</span> <span class="attr">dataNode</span>=<span class="string">"mytest"</span>&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--定义节点名称/节点主机/数据名称--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"mytest"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"mytest"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"localhost1"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span>  <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select 1<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM1"</span> <span class="attr">url</span>=<span class="string">"192.168.106.137:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"Lzq_0221"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--读数据库--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS1"</span> <span class="attr">url</span>=<span class="string">"192.168.106.138:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"Lzq_0221"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 需要实现双机热备 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM2"</span> <span class="attr">url</span>=<span class="string">"192.168.106.138:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"Lzq_0221"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS1"</span> <span class="attr">url</span>=<span class="string">"192.168.106.137:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"Lzq_0221"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>server.xml主要配置：</p><ul><li><p>设置防火墙／设置用户标签（用户名／用户密码／数据库要与schema中一致）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>Lzq_0221<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--与schema.xml中的配置相同 注意数据库的大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>mytest<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readOnly"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过连接mycat来操作数据库</p></li><li><p>规则</p><p> rule.xml:mycat分片规则（分库分表）定义的规则为对id使用mod-log将数据库平均拆分。用function中count指定分配的物理库的数量。<br> 支持的规则：固定分片hash算法／范围约定／求模法／日期列分区／一致性hash（可以解决动态扩容的问题）</p></li><li><h2 id="6-分库分表策略，分库分表配置？"><a href="#6-分库分表策略，分库分表配置？" class="headerlink" title="6.分库分表策略，分库分表配置？"></a>6.分库分表策略，分库分表配置？</h2></li></ol><p>答：使用mycat分片实现分库分表……</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-数据库热备原理？&quot;&gt;&lt;a href=&quot;#1-数据库热备原理？&quot; class=&quot;headerlink&quot; title=&quot;1.数据库热备原理？&quot;&gt;&lt;/a&gt;1.数据库热备原理？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;二进制日志文件。当主数据库发生更新时，会将更新的数据写入二进制文件中。&lt;/li&gt;
&lt;li&gt;I／O线程。从机实时监听二进制文件是否有更新操作，如果有更新操作则读取更新的内容。&lt;/li&gt;
&lt;li&gt;中继日志。保存主库更新的数据（临时存储）。&lt;/li&gt;
&lt;li&gt;SQl线程。将中继日志的信息更新到数据库中。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="mycat" scheme="https://www.keenlee.net/tags/mycat/"/>
    
      <category term="数据库中间件" scheme="https://www.keenlee.net/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>dubbo基础小结</title>
    <link href="https://www.keenlee.net/2018/08/20/dubbo%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/08/20/dubbo基础小结/</id>
    <published>2018-08-20T07:55:00.000Z</published>
    <updated>2018-09-11T10:00:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是dubbo"><a href="#1-什么是dubbo" class="headerlink" title="1.什么是dubbo"></a>1.什么是dubbo</h2><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。<br><a id="more"></a></p><h2 id="2-dubbo的特性？"><a href="#2-dubbo的特性？" class="headerlink" title="2.dubbo的特性？"></a>2.dubbo的特性？</h2><ul><li><h4 id="面向接口代理的高性能RPC调用"><a href="#面向接口代理的高性能RPC调用" class="headerlink" title="面向接口代理的高性能RPC调用"></a>面向接口代理的高性能RPC调用</h4><p>提供高性能的基于代理的远程调用能力，服务以接口为粒度，为开发者屏蔽远程调用底层细节。</p></li><li><h4 id="智能负载均衡"><a href="#智能负载均衡" class="headerlink" title="智能负载均衡"></a>智能负载均衡</h4><p>内置多种负载均衡策略，智能感知下游节点健康状况，显著减少调用延迟，提高系统吞吐量。</p></li><li><h4 id="服务自动注册与发现"><a href="#服务自动注册与发现" class="headerlink" title="服务自动注册与发现"></a>服务自动注册与发现</h4><p>支持多种注册中心服务，服务实例上下线实时感知。</p></li><li><h4 id="高度可扩展能力"><a href="#高度可扩展能力" class="headerlink" title="高度可扩展能力"></a>高度可扩展能力</h4><p>遵循微内核+插件的设计原则，所有核心能力如Protocol、Transport、Serialization被设计为扩展点，平等对待内置实现和第三方实现。</p></li><li><h4 id="运行期流量调度"><a href="#运行期流量调度" class="headerlink" title="运行期流量调度"></a>运行期流量调度</h4><p>内置条件、脚本等路由策略，通过配置不同的路由规则，轻松实现灰度发布，同机房优先等功能。</p></li><li><h4 id="可视化的服务治理与运维"><a href="#可视化的服务治理与运维" class="headerlink" title="可视化的服务治理与运维"></a>可视化的服务治理与运维</h4><p>提供丰富服务治理、运维工具：随时查询服务元数据、服务健康状态及调用统计，实时下发路由策略、调整配置参数。</p></li></ul><h2 id="3-Dubbo工作原理？"><a href="#3-Dubbo工作原理？" class="headerlink" title="3.Dubbo工作原理？"></a>3.Dubbo工作原理？</h2><p>答：1.消费者2.提供者3.监视器（monitor）4.注册中心（zookeeper）<br>1.消费者配置注册中心地址，添加依赖的服务接口及服务id<br>2.提供者配置注册中心地址，配置dubbo服务接口，暴露服务接口，创建具体实现接口服务的bean</p><p><img src="http://dubbo.apache.org/img/architecture.png" alt="img"></p><h2 id="4-rpc原理"><a href="#4-rpc原理" class="headerlink" title="4.rpc原理"></a>4.rpc原理</h2><h2 id="5-Spring整合Dubbo？"><a href="#5-Spring整合Dubbo？" class="headerlink" title="5.Spring整合Dubbo？"></a>5.Spring整合Dubbo？</h2><p>前提：搭建好了zookeeper作为注册中心。</p><ol><li><p>创建Duubo接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentsDubboServiceInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Students&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者</p><ul><li><p>service实现dubbo接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentsServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentsDubboServiceInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentsMapper studentsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Students&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentsMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置生产者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:dubbo</span>=<span class="string">"http://dubbo.apache.org/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://dubbo.apache.org/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://dubbo.apache.org/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义了提供方应用信息，用于计算依赖关系；在 dubbo-admin 或 dubbo-monitor 会显示这个名字，方便辨识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demotest-provider"</span> <span class="attr">owner</span>=<span class="string">"programmer"</span> <span class="attr">organization</span>=<span class="string">"dubbox"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 zookeeper 注册中心暴露服务，注意要先开启 zookeeper--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:registry address="zookeeper://192.168.106.128:2181"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span>  <span class="attr">protocol</span>=<span class="string">"zookeeper"</span>  <span class="attr">address</span>=<span class="string">"192.168.106.128:2181,192.168.106.129:2181,192.168.106.130:2181"</span>  /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 dubbo 协议实现定义好的 api.PermissionService 接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"net.keenlee.pakchoi.dubbo.service.StudentsDubboServiceInterface"</span> <span class="attr">ref</span>=<span class="string">"studentsDubboService"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span> <span class="attr">timeout</span>=<span class="string">"10000"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--具体实现该接口的 bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentsDubboService"</span> <span class="attr">class</span>=<span class="string">"net.keenlee.pakchoi.manager.service.impl.StudentsServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>消费者</p><ul><li><p>service实现dubbo接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentsServiceTestImpl</span> <span class="keyword">implements</span> <span class="title">StudentsServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StudentsDubboServiceInterface studentsDubboServiceInterface;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Students&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentsDubboServiceInterface.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置消费者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demotest-consumer"</span> <span class="attr">owner</span>=<span class="string">"programmer"</span> <span class="attr">organization</span>=<span class="string">"dubbox"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--向 zookeeper 订阅 provider 的地址，由 zookeeper 定时推送--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:registry address="zookeeper://192.168.106.128:2181"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span>  <span class="attr">protocol</span>=<span class="string">"zookeeper"</span>  <span class="attr">address</span>=<span class="string">"192.168.106.128:2181,192.168.106.129:2181,192.168.106.130:2181"</span>  /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 dubbo 协议调用定义好的 api.PermissionService 接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"studentsDubboService"</span> <span class="attr">interface</span>=<span class="string">"net.keenlee.pakchoi.dubbo.service.StudentsDubboServiceInterface"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p>dubbo官网：<a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是dubbo&quot;&gt;&lt;a href=&quot;#1-什么是dubbo&quot; class=&quot;headerlink&quot; title=&quot;1.什么是dubbo&quot;&gt;&lt;/a&gt;1.什么是dubbo&lt;/h2&gt;&lt;p&gt;Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="dubbo" scheme="https://www.keenlee.net/tags/dubbo/"/>
    
      <category term="RPC" scheme="https://www.keenlee.net/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>nginx基础小结</title>
    <link href="https://www.keenlee.net/2018/08/20/nginx%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/08/20/nginx基础小结/</id>
    <published>2018-08-20T03:07:00.000Z</published>
    <updated>2018-08-20T07:28:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是nginx？"><a href="#1-什么是nginx？" class="headerlink" title="1.什么是nginx？"></a>1.什么是nginx？</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理服务，也是一个IMAP/POP3/SMTP服务。</p><h2 id="2-反向代理？项目中使用场景？"><a href="#2-反向代理？项目中使用场景？" class="headerlink" title="2.反向代理？项目中使用场景？"></a>2.反向代理？项目中使用场景？</h2><p>反向代理是指以代理服务器来接受网络请求，将请求转发给内部服务器，并将结果返回给给客户端。<br>实现动静分离，在进行图片回显时由于我们无法直接访问服务器存在本地磁盘的图片文件，只能通过一个虚拟路径进行访问，该请求被代理服务器拦截，将虚拟路径替换为真实路径，最终通过代理将结果进行返回。<br><a id="more"></a></p><h2 id="3-nginx负载均衡？"><a href="#3-nginx负载均衡？" class="headerlink" title="3.nginx负载均衡？"></a>3.nginx负载均衡？</h2><ol><li>轮询机制：upstream 集群名称{}:根据配置文件的顺序依次进行服务的调用。</li><li>权重机制：在集群中添加weight属性。</li><li>ip_hash:根据用户的IP地址进行hash运算，最终算出特定的一台机器进行数据转发（如果配置ip_hash权重和轮询将不起作用）。</li><li>backup：备用机机制，当主服务正忙或者断电／宕机时，备用机将会起作用。</li></ol><h2 id="4-nginx基本配置？"><a href="#4-nginx基本配置？" class="headerlink" title="4.nginx基本配置？"></a>4.nginx基本配置？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">#user  nobody;</span><br><span class="line">#启动进程，通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line">#全局错误日志文件</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">#pid文件</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">#epoll是多路复用IO(I/O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll;</span><br><span class="line">#单个后台worker process进程的最大并发链接数</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                          &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                          &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    access_log  logs/access.log  main;</span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line">#设定虚拟主机配置</span><br><span class="line">server&#123;</span><br><span class="line">#侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/nginx.access.log  main;</span><br><span class="line">error_log错误日志路径;</span><br><span class="line"></span><br><span class="line">#默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"># 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">location ／&#123;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">proxy_set_header    Host            $host;</span><br><span class="line">proxy_set_header    X-Real-IP       $remote_addr;</span><br><span class="line">proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">root :定义服务器的默认网站根目录位置;</span><br><span class="line">index:定义首页索引文件的名称；</span><br><span class="line">proxy_pass: http://localhost:8091;//转发请求</span><br><span class="line">或者proxy_pass: http://7080 #跟upstream合用</span><br><span class="line">    #定义超时策略</span><br><span class="line">    proxy_connect_timeout 1</span><br><span class="line">    proxy_send_timeout 1</span><br><span class="line">    proxy_read_timeout 1</span><br><span class="line">   &#125;</span><br><span class="line">   #重定向：相对于proxy_pass，地址栏的路径会改变</span><br><span class="line">   location ^~ /oauth2/ &#123;</span><br><span class="line">            rewrite /(.*) https://$host/$1 permanent;</span><br><span class="line">        &#125;</span><br><span class="line">   #禁止访问 .htxxx 文件</span><br><span class="line">    location ~ /.ht &#123;</span><br><span class="line">         deny all;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">#指定proxy_pass代理路径,均衡策略，最大连接失败次数，超时失败时间</span><br><span class="line">upstream 7080 &#123;</span><br><span class="line">      server ip1:7080 weight=5 max_fails=2 fail_timeout=30s;</span><br><span class="line">      #server ip1:7080 weight=3 max_fails=2 fail_timeout=30s;</span><br><span class="line">      #server ip2:7080 weight=2 max_fails=2 fail_timeout=30s;</span><br><span class="line">&#125;</span><br><span class="line">#引入其它配置文件</span><br><span class="line">include servers/*;</span><br><span class="line">include ***.conf; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-正向代理与反向代理的区别？"><a href="#5-正向代理与反向代理的区别？" class="headerlink" title="5.正向代理与反向代理的区别？"></a>5.正向代理与反向代理的区别？</h2><h2 id="6-nginx如何实现tomcat的高可用？"><a href="#6-nginx如何实现tomcat的高可用？" class="headerlink" title="6.nginx如何实现tomcat的高可用？"></a>6.nginx如何实现tomcat的高可用？</h2><pre><code>在nginx连接服务器期间，会自动向服务器发送健康检查机制（ping/发起一次请求）如果服务器失败的次数达到最大失败次数（max_fail）上限，在这个检测周期(fail_timeout)中，将不会再有请求转发到这个服务器上，直到下一次检测周期。</code></pre><h2 id="7-nginx进程模型？事件处理？"><a href="#7-nginx进程模型？事件处理？" class="headerlink" title="7.nginx进程模型？事件处理？"></a>7.nginx进程模型？事件处理？</h2><h2 id="8-与其他服务器的对比？"><a href="#8-与其他服务器的对比？" class="headerlink" title="8.与其他服务器的对比？"></a>8.与其他服务器的对比？</h2><h2 id="9-nginx防盗链？"><a href="#9-nginx防盗链？" class="headerlink" title="9.nginx防盗链？"></a>9.nginx防盗链？</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是nginx？&quot;&gt;&lt;a href=&quot;#1-什么是nginx？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是nginx？&quot;&gt;&lt;/a&gt;1.什么是nginx？&lt;/h2&gt;&lt;p&gt;Nginx (engine x) 是一个高性能的HTTP和反向代理服务，也是一个IMAP/POP3/SMTP服务。&lt;/p&gt;
&lt;h2 id=&quot;2-反向代理？项目中使用场景？&quot;&gt;&lt;a href=&quot;#2-反向代理？项目中使用场景？&quot; class=&quot;headerlink&quot; title=&quot;2.反向代理？项目中使用场景？&quot;&gt;&lt;/a&gt;2.反向代理？项目中使用场景？&lt;/h2&gt;&lt;p&gt;反向代理是指以代理服务器来接受网络请求，将请求转发给内部服务器，并将结果返回给给客户端。&lt;br&gt;实现动静分离，在进行图片回显时由于我们无法直接访问服务器存在本地磁盘的图片文件，只能通过一个虚拟路径进行访问，该请求被代理服务器拦截，将虚拟路径替换为真实路径，最终通过代理将结果进行返回。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="nginx" scheme="https://www.keenlee.net/tags/nginx/"/>
    
      <category term="代理" scheme="https://www.keenlee.net/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础小结</title>
    <link href="https://www.keenlee.net/2018/08/08/Redis%E5%9F%BA%E7%A1%80%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.keenlee.net/2018/08/08/Redis基础小结/</id>
    <published>2018-08-08T07:07:00.000Z</published>
    <updated>2018-12-03T09:12:46.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是redis？"><a href="#什么是redis？" class="headerlink" title="什么是redis？"></a>什么是redis？</h2><p>redis是一种内存中的数据结构存储系统，它可以用作数据库／缓存／消息中间件。</p><h2 id="redis常见的作用？"><a href="#redis常见的作用？" class="headerlink" title="redis常见的作用？"></a>redis常见的作用？</h2><p>项目中使用redis作为缓存使用，这样可以减轻数据库的压力，同时可以加快一些常用数据的查询效率。对于查询多修改少的数据进行缓存。<br><a id="more"></a></p><h2 id="数据库中的数据与缓存中的数据如何实现同步？"><a href="#数据库中的数据与缓存中的数据如何实现同步？" class="headerlink" title="数据库中的数据与缓存中的数据如何实现同步？"></a>数据库中的数据与缓存中的数据如何实现同步？</h2><p>同步是同程序员代码来实现控制的。具体操作是：</p><ol><li>当缓存中不存在数据时，先去数据库查询，成功后更新缓存。</li><li>当缓存中存在数据时，首先更新缓存中的数据，同时会生成对应的修改操作的key一张记录表，之后redis后台会有相关的机制（待查。。。），读取该列表的保存的key，找到对应的数据，同步更新到数据库中。</li></ol><h2 id="缓存中的数据如何实现持久化操作？为什么要进行持久化操作？"><a href="#缓存中的数据如何实现持久化操作？为什么要进行持久化操作？" class="headerlink" title="缓存中的数据如何实现持久化操作？为什么要进行持久化操作？"></a>缓存中的数据如何实现持久化操作？为什么要进行持久化操作？</h2><p>redis中有完善的持久化策略。</p><ul><li><p>RDB（默认）：这种备份方式的效率最高，在规定的时间周期内为数据进行备份，如在多少秒内进行了多少次set操作则进行一次备份，保存在rdb文件中，当redis重启之后会根据配置文件找到对应的备份文件还原数据。</p></li><li><p>AOF：实时的持久化策略，性能相对较低。有三种模式：</p><pre><code>always：执行一次set就持久化一次。everysec：每隔一秒进行一次持久化（常用）。no：持久化的时间由操作系统决定。（一般不配）</code></pre><p>因为redis中的数据保存在内存中，如果出现宕机或断电的情况，会使内存中的数据丢失。如果是当作数据库和消息队列来使用时，这样的数据是绝不允许丢失的。</p></li></ul><h2 id="redis如何管理维护自身内存大小的？"><a href="#redis如何管理维护自身内存大小的？" class="headerlink" title="redis如何管理维护自身内存大小的？"></a>redis如何管理维护自身内存大小的？</h2><p>redis有6种内存优化管理的策略。</p><ol><li>lru：删除最近最少使用的数据</li><li>volatile-lru:删除设定了超时时间的数据中找最近最少使用的数据</li><li>allkey-lru：所有的key根据lru算法进行删除</li><li>volatile-random：在设定了超时时间的数据中进行随机删除</li><li>allkey-random：在所有的key中进行随机删除</li><li>volatile-ttl：在设置了超时时间的数据中删除，将要超时的数据</li><li>noevication：默认策略，不会进行删除，当进行set操作时会返回报错信息</li></ol><h2 id="缓存中的数据结构是怎样的？支持的数据类型有哪些？"><a href="#缓存中的数据结构是怎样的？支持的数据类型有哪些？" class="headerlink" title="缓存中的数据结构是怎样的？支持的数据类型有哪些？"></a>缓存中的数据结构是怎样的？支持的数据类型有哪些？</h2><p>redis数据是通过key-value方式进行存储的。</p><p>redis支持五种基础数据类型：</p><p>string（字符串）：redis字符串是动态的，内部结构类似于Java的ArrayList，字符串最大长度为 512M 。</p><p>hash（哈希）：类似于Java的HashMap，数组+链表。不同的是字典的值只能是字符串，同时采用的是渐进式rehash策略。即保存了，新旧两个hash表，知道rehash全部完成，删除旧的。</p><p>hash 结构也可以用来存储用户信息，不同于字符串一次性需要全部序列化整个对象，hash 可以对用户结构中的每个字段单独存储。这样当我们需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话就只能一次性全部读取，这样就会比较浪费网络流量。 hash 也有缺点，hash 结构的存储消耗要高于单个字符串，到底该使用 hash 还是字符串，需要根据实际情况再三权衡。</p><p>list（列表）：类似于Java的LinkList（quickList），当列表元素较少时，采用ziplist（压缩列表）结构，连续的存储空间，节省存储空间，减轻内存碎片化 。当列表元素较多时，采用quicklist。将多个 <code>ziplist</code> 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。 </p><p>set（集合）：类似于Java的HashSet，可用作全局去重</p><p>zset（sorted set：有序集合）：类似于SortedSet+HashMap，内部是跳跃列表的结构。</p><p>高级数据类型：HyperLogLog（），Geo、Pub/Sub （不成熟，基本被放弃），stream（5.0）支持消息订阅，想代替mq？</p><h2 id="简述redis分片？为什么需要redis分片？"><a href="#简述redis分片？为什么需要redis分片？" class="headerlink" title="简述redis分片？为什么需要redis分片？"></a>简述redis分片？为什么需要redis分片？</h2><p>分片：根据某种规则…</p><p>分片的原因：</p><ol><li>redis内存满了，分片可实现动态扩容</li><li>redis服务器可能宕机，分片可以让每个节点保存一部分数据，宕机只会影响部分数据</li></ol><h2 id="简述redis哨兵机制？"><a href="#简述redis哨兵机制？" class="headerlink" title="简述redis哨兵机制？"></a>简述redis哨兵机制？</h2><p>使用哨兵机制实现redis的高可用。<br>哨兵机制实现原理：</p><ol><li>哨兵会主动给主机发送心跳检测，如果主机三次没有响应，则会推选出从机代替成为新的主机。</li><li>当新的主机被推选之后，会修改所有的主从配置文件，重新实现主从挂载。</li><li>客户端无需关注谁是主机，只需要通过哨兵操作redis。</li></ol><h2 id="redis中hash一致性？"><a href="#redis中hash一致性？" class="headerlink" title="redis中hash一致性？"></a>redis中hash一致性？</h2><ol><li>均衡性：尽可能的让数据均匀的落在不同的节点上。虚拟节点可以有效的平衡数据量</li><li>单调性：如果节点的数量发生改变，则需要进行重新运算，节点中的数据可以重新挂载</li><li>分散性：在分布式系统中，由于部分操作看不到全部的内存空间，相同的key落入不同的位置</li><li>负载：在分布式系统中，由于部分操作看不到全部的内存空间，不同的key落到同一个位置</li></ol><h2 id="redis集群搭建？"><a href="#redis集群搭建？" class="headerlink" title="redis集群搭建？"></a>redis集群搭建？</h2><ol><li><p>创建Cluster文件夹，复制配置文件，cluster/700*/7000-7008</p></li><li><p>修改配置文件</p><ul><li>注释绑定 bind 127.0.0.1</li><li>关闭保护模式 protected-mode no</li><li>修改端口 port 7000</li><li>开启后台启动 daemonize yes</li><li>修改pid路径 pidfile </li><li>修改持久化文件路径 dir</li><li>修改内存策略 maxmemory-policy</li><li>启动redis集群 cluster-enabled yes</li><li>添加节点信息 cluster-config-file node-7000.conf</li><li>添加超时时间 cluster-node-timeout 15000</li></ul></li><li><p>启动redis集群</p><ol><li>复制配置文件</li><li>批量修改配置文件 :在配置文件中如“ :%s/7000/7001/g”</li><li>批量启动配置文件 创建批量脚本 sh start.sh</li><li>使用ruby工具构建集群 <ol><li>安装ruby，./configure （–prefix=***）     make    make install    ruby -v</li><li>安装rubygems, ruby  setup.rb</li><li>安装redis-gem， 将文件copy到rubygems根目录   执行<br>​            gem install -l redis-*.gem</li><li>检查安装 gem list</li><li>构建集群，在redis的根目录下执行<br>​        ./src/redis-trib.rb create –replicas 2 192.168.106.131:7000 192.168.106.131:7001 192.168.106.131:7002 192.168.106.131:7003 192.168.106.131:7004 192.168.106.131:7005 192.168.106.131:7006 192.168.106.131:7007 192.168.106.131:7008</li></ol></li></ol></li><li><p>测试</p><p>redis-cli中info replication,查看主从</p></li><li><p>redis5.0 redis-cli中集成了集群构建工具，不再需要ruby</p></li></ol><p>安装过程的报错：</p><p>安装rubygem报错：/usr/local/src/ruby/rubygems-2.7.7/lib/rubygems/core_ext/kernel_require.rb:59:in `require’: cannot load such file – zlib (LoadError)。安装过程出现问题，尝试了网上的一些解决方法，无效。最后采用make distclean:将全部编译及生成的文件清除后重新进行安装，成功。    </p><h2 id="spring整合redis？"><a href="#spring整合redis？" class="headerlink" title="spring整合redis？"></a>spring整合redis？</h2><h2 id="redis作为分布式锁的使用？"><a href="#redis作为分布式锁的使用？" class="headerlink" title="redis作为分布式锁的使用？"></a>redis作为分布式锁的使用？</h2><h6 id="什么是redis分布式锁"><a href="#什么是redis分布式锁" class="headerlink" title="什么是redis分布式锁"></a>什么是redis分布式锁</h6><p>在分布式环境中，保证不同节点的线程同步执行。</p><h6 id="分布式锁实现的三个核心："><a href="#分布式锁实现的三个核心：" class="headerlink" title="分布式锁实现的三个核心："></a>分布式锁实现的三个核心：</h6><pre><code>1.加锁setnx（key , 1）当一个线程执行setnx返回1，说明原本的key不存在，该线程成功得到锁，否则说明该key已经存在，该线程抢锁失败。2.解锁    del(key)    释放锁之后，其他线程就可以继续执行setnx命令来获得锁3.超时锁1.为什么要有超时锁？答：当一个得到锁的线程在执行任务的过程中挂掉，来不及显示的释放锁，那么这块资源将会永远被锁住，其他线程再也无法进入了。setnx不支持超时参数，需要额外的指令：expire(key,30)</code></pre><h6 id="redis分布式锁中三个致命的问题"><a href="#redis分布式锁中三个致命的问题" class="headerlink" title="redis分布式锁中三个致命的问题"></a>redis分布式锁中三个致命的问题</h6><pre><code>场景一：    当某个线程执行setnx,成功得到了锁，但此时该节点挂了，却还没来得及执行expire指令，这样也会导致锁一直无法释放，即它们的执行不是原子性的。解决：（版本2.6.12以上版本）set(key,1,30,NX)取代setnx指令场景二：    假如A线程得到了锁，且成功得到了锁，并且设置了超时时间为30s,但如果A线程执行的很慢，超过30秒还没有执行完成，此时锁已经被超时释放，线程B获得了锁，当A执行完后，通过del指令来释放锁，但B线程还没有执行完，此时A线程把B现成的锁给释放了解决：可以在加锁的时候把当前线程的ID作为value，并在删除之前验证key对应的value是不是自己的线程ID。但是此时的判断和释放锁也不是原子性的，这里我们需要使用Lua脚本来实现，此时验证与释放为原子性操作了。String luaScript = &quot;if redis.call(&apos;get&apos;,KEY[1])==ARGV[1] then return redis.call(&apos;del&apos;,KEYS) else return 0 end&quot;redisClient.eval(luaScript,Collections.singletonList(key),Collections.singletonList(threadId));</code></pre><p>线程ID在多个进程下不是全局唯一 。这里可以使用全局唯一的业务ID，或者在线程ID前加上机器id</p><pre><code>场景三：在场景二中出现了两个线程访问同一个被锁的代码块的情况如何解决？    解决：让获得锁的线程开启一个守护线程，当主线程快过期但还没有执行结束时，为其续航，当主线程真正执行完成后，再显示的关掉守护线程另一种更优雅的实现方式，Zookeeper分布式锁zookeeper的可靠性是要大于使用redis实现的分布式锁的，但是相比而言，redis的性能更好redis官方推荐分布式锁：Redission2.8.1的redisson需要jackson 2.5+版本</code></pre><p>参考自：微信公众号-程序员小灰</p><p>当一个线程请求加锁失败了怎么办？重试策略：</p><ol><li>直接抛出异常，通知用户稍后重试；</li><li>sleep 一会再重试；</li><li>将请求转移至延时队列，过一会再试；</li></ol><h2 id="redis作为消息队列使用？"><a href="#redis作为消息队列使用？" class="headerlink" title="redis作为消息队列使用？"></a>redis作为消息队列使用？</h2><p>场景：用户下单，将用户生成展示的订单先处理完成，其他操作，则存入消息队列中，这样可以更快的响应用户请求，体验更好。</p><h2 id="redis中常用的操作命令？"><a href="#redis中常用的操作命令？" class="headerlink" title="redis中常用的操作命令？"></a>redis中常用的操作命令？</h2><p><a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">http://www.redis.cn/commands.html</a></p><h2 id="缓存和数据库双写数据一致性如何保证？"><a href="#缓存和数据库双写数据一致性如何保证？" class="headerlink" title="缓存和数据库双写数据一致性如何保证？"></a>缓存和数据库双写数据一致性如何保证？</h2><p>数据的一致性，包括强一致性和最终一致性，要求强一致性，则不要使用缓存。最终一致性也只是降低不一致发生的概率，无法完全避免。</p><p>读取数据一般没啥问题，主要是更新数据。</p><p>三种策略：</p><p>1.先更新数据库，再更新缓存</p><p>问题：线程安全问题,多线程更新，并发情况下脏读。在写多读少的情况下，缓存频繁更新，但很少使用到，浪费性能。（不推荐）</p><p>2.先删除缓存，再更新数据库</p><p>并发场景下，A线程更新，B线程读取,A删除了缓存，还没来得及更新数据库，此时B查询缓存无数据，进而查询数据库，再更新缓存，这将导致缓存中的值永远为旧的值（不设置过期时间，或者回收的情况下）。</p><p>解决：延时双删策略：就是在A更新完数据库1S(根据业务逻辑时间)后，再次删除缓存（开启另外一个线程）</p><p>3.先更新数据库，再删除缓存</p><p>首先，采取正确更新策略，先更新数据库，再删缓存。其次，因为可能存在删除缓存失败的问题，提供一个补偿措施即可，例如利用消息队列。</p><p>参考：<a href="https://www.cnblogs.com/rjzheng/p/9041659.html" target="_blank" rel="noopener">https://www.cnblogs.com/rjzheng/p/9041659.html</a> </p><p>4.先更新缓存，再更新数据库</p><p>淘宝的一个场景读多写多 ，sql无序，使用过。</p><p>《从P1到P7——我在淘宝这7年》这篇博客原文 ：</p><p>在【招财进宝】项目中有一个技术的细节值得拿出来说说，淘宝商品详情页面每天的流量在10亿以上，里面的内容都是放在缓存里的，做【招财进宝】的时候，我们要给卖家显示他的商品被浏览的次数，这个数字必须实时更新，而用缓存的话一般都是异步更新的。于是商品表里面增加了这样一个字段，每增加一个PV这个字段就要更新一次。发布上去一个小时数据库就挂掉了，撑不住这么高的update。数据库撑不住怎么办？一般的缓存策略是不支持实时更新的，这时候多隆大神想了个办法，在apache上面写了一个模块，这个数字根本不经过下层的web容器（只经过apache）就写入一个集中式的缓存区了，这个缓存区的数据再异步更新到数据库。好像什么问题，到了多隆手里，总能迎刃而解。 </p><h2 id="redis是单线程的为什么那么快？"><a href="#redis是单线程的为什么那么快？" class="headerlink" title="redis是单线程的为什么那么快？"></a>redis是单线程的为什么那么快？</h2><ul><li><p>纯内存操作</p></li><li><p>单线程操作，避免了上下文的切换</p></li><li><p>采用了非阻塞式I/O多路复用机制（NIO）</p></li></ul><p>  参考：<a href="https://www.cnblogs.com/rjzheng/p/9096228.html" target="_blank" rel="noopener">https://www.cnblogs.com/rjzheng/p/9096228.html</a></p><h2 id="redis缓存雪崩，缓存穿透，缓存并发？"><a href="#redis缓存雪崩，缓存穿透，缓存并发？" class="headerlink" title="redis缓存雪崩，缓存穿透，缓存并发？"></a>redis缓存雪崩，缓存穿透，缓存并发？</h2><ul><li>缓存穿透：<br>场景：缓存穿透是指使用不存在的key进行大量的高并发访问，导致缓存无法命中，造成数据库压力过大，甚至压死。<br>解决方案：<ol><li>将所有数据hash到一个大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉。</li><li>将空的结果也放入缓存中，但给它一个默认值，并设置一个很短的生存时间这样第二次再访问就有值了，就不会访问数据库了。</li></ol></li><li><p>缓存并发：<br>场景：在高并发场景下，当一个缓存的key过期时，而当前key的访问量比较大，多个请求同时发现缓存过期，因此会访问数据库，导致数据库压力过大。<br>解决方案：</p><ol><li>分布式锁</li><li>本地锁（当一个服务有多个节点时不适用）</li><li>软过期（在业务数据中存储过期时间信息，由业务程序判断是否过期并更新，发现数据将要过期时，延长缓存的时间，同时派遣另一条线程去数据库获取最新的数据）</li></ol></li><li><p>缓存雪崩：<br>场景：缓存服务器重启或者大量的缓存在同一时间段内失效，导致数据库瞬时压力过大。<br>解决方案：对不同的数据使用不同的失效时间，如基础时间上加一个随机时间。</p><hr></li></ul><p><img src="http://wx2.sinaimg.cn/sq612/005AqIfAgy1fu2f631ch9j30k00k0wga.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是redis？&quot;&gt;&lt;a href=&quot;#什么是redis？&quot; class=&quot;headerlink&quot; title=&quot;什么是redis？&quot;&gt;&lt;/a&gt;什么是redis？&lt;/h2&gt;&lt;p&gt;redis是一种内存中的数据结构存储系统，它可以用作数据库／缓存／消息中间件。&lt;/p&gt;
&lt;h2 id=&quot;redis常见的作用？&quot;&gt;&lt;a href=&quot;#redis常见的作用？&quot; class=&quot;headerlink&quot; title=&quot;redis常见的作用？&quot;&gt;&lt;/a&gt;redis常见的作用？&lt;/h2&gt;&lt;p&gt;项目中使用redis作为缓存使用，这样可以减轻数据库的压力，同时可以加快一些常用数据的查询效率。对于查询多修改少的数据进行缓存。&lt;br&gt;
    
    </summary>
    
      <category term="架构" scheme="https://www.keenlee.net/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="redis" scheme="https://www.keenlee.net/tags/redis/"/>
    
      <category term="缓存" scheme="https://www.keenlee.net/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="消息队列" scheme="https://www.keenlee.net/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="分布式锁" scheme="https://www.keenlee.net/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
</feed>
